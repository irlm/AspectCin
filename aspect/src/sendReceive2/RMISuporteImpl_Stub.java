// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package sendReceive2;

public final class RMISuporteImpl_Stub
    extends java.rmi.server.RemoteStub
    implements sendReceive2.RMISuporte, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_receive_0;
    private static java.lang.reflect.Method $method_send_1;
    
    static {
	try {
	    $method_receive_0 = sendReceive2.RMISuporte.class.getMethod("receive", new java.lang.Class[] {sendReceive2.Mensagem.class});
	    $method_send_1 = sendReceive2.RMISuporte.class.getMethod("send", new java.lang.Class[] {sendReceive2.Mensagem.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public RMISuporteImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of receive(Mensagem)
    public void receive(sendReceive2.Mensagem $param_Mensagem_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_receive_0, new java.lang.Object[] {$param_Mensagem_1}, -4772604632256186720L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of send(Mensagem)
    public void send(sendReceive2.Mensagem $param_Mensagem_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_send_1, new java.lang.Object[] {$param_Mensagem_1}, 29383266494916491L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
