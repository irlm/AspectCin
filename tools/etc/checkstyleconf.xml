<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!--

  Checkstyle configuration for The Community OpenORB

  author: lkuehne

-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <module name="PackageHtml"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="${checkstyle.lineSeparator}"/>
    </module>
<!--
    DISABLED: Reduce the noise so that real problems can be noticed!
    <module name="StrictDuplicateCode">
        <property name="min" value="30"/>
        <property name="severity" value="warning"/>
    </module>
-->
    <module name="TreeWalker">

        <property name="cacheFile" value="${checkstyle-cache}"/>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
          <property name="severity" value="ignore"/> <!-- TODO: warning -->
          <property name="scope" value="protected"/>
        </module>
        <module name="JavadocType">
          <property name="severity" value="ignore"/> <!-- TODO: warning -->
          <property name="scope" value="public"/>
        </module>
        <module name="JavadocVariable">
          <property name="severity" value="ignore"/> <!-- TODO: warning -->
          <property name="scope" value="protected"/>
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!-- the actual format patterns are defined in checkstyle.properties
             the can be overridden individually (per checkstyle call)
             by using a nested property element in the checkstyle task.
             This feature is mainly used by the OpenORB module -->
        <module name="ConstantName">
          <property name="format" value="${checkstyle.pattern.const}"/>
        </module>

        <module name="LocalFinalVariableName">
          <property name="format" value="${checkstyle.pattern.localvar}"/>
        </module>

        <module name="LocalVariableName">
          <property name="format" value="${checkstyle.pattern.localvar}"/>
        </module>

        <module name="MemberName">
          <property name="format" value="${checkstyle.pattern.member}"/>
        </module>

        <module name="MethodName">
          <property name="format" value="${checkstyle.pattern.method}"/>
        </module>

        <module name="PackageName">
          <property name="format" value="${checkstyle.pattern.package}"/>
        </module>

        <module name="ParameterName">
          <property name="format" value="${checkstyle.pattern.parameter}"/>
        </module>

        <module name="StaticVariableName">
          <property name="format" value="${checkstyle.pattern.static}"/>
        </module>

        <module name="TypeName">
          <property name="format" value="${checkstyle.pattern.type}"/>
        </module>



        <!-- Checks for Headers                              -->
        <!-- See http://checkstyle.sf.net/config_header.html -->
        <module name="Header">
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project.                   -->
            <property name="headerFile" value="${basedir}/../tools/etc/LICENSE.txt"/>
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength">
          <property name="max" value="${checkstyle.maxfilelen}"/>
        </module>
        <module name="LineLength">
          <property name="max" value="100"/> <!-- default 80, we follow the Avalon rules here! -->
        </module>
        <module name="MethodLength">
          <property name="tokens" value="METHOD_DEF"/>
          <property name="max" value="${checkstyle.maxmethodlen}"/> <!-- TODO: default 150 -->
        </module>
        <module name="MethodLength">
          <property name="tokens" value="CTOR_DEF"/>
          <property name="max" value="500"/> <!-- TODO: default 150 -->
        </module>
        <module name="ParameterNumber">
          <property name="max" value="13"/> <!-- TODO: default 7 -->
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <!-- TODO: need this ? <module name="EmptyForIteratorPad"/> -->
        <module name="NoWhitespaceAfter">
          <!-- removed ARRAY_INIT from default to match our existing code -->
          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
<!-- TODO: <module name="NoWhitespaceBefore"/> -->
<module name="NoWhitespaceBefore">
  <property name="tokens" value="POST_INC, POST_DEC"/> 
</module>
<module name="NoWhitespaceBefore">
  <property name="severity" value="warning"/>
  <property name="tokens" value="SEMI"/> 
</module>
        <module name="OperatorWrap">
          <property name="severity" value="warning"/>
        </module>
        <module name="ParenPad">
          <property name="option" value="space"/>
        </module>
        <module name="TabCharacter"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
<!-- TODO:        <module name="RedundantModifier"> -->
<module name="RedundantModifier">
  <property name="severity" value="warning"/>
  <property name="tokens" value="VARIABLE_DEF"/>
</module>
<module name="RedundantModifier">
  <property name="tokens" value="METHOD_DEF"/>
</module>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
          <property name="severity" value="warning"/>
          <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock">
          <property name="option" value="text"/>
        </module>
        <module name="LeftCurly">
          <property name="option" value="nl"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly">
          <property name="option" value="alone"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="DoubleCheckedLocking">
          <property name="severity" value="warning"/> <!-- TODO: should be error -->
        </module>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode">
          <property name="severity" value="warning"/>
        </module>
        <module name="HiddenField">
          <property name="severity" value="warning"/>
        </module>
        <module name="IllegalInstantiation">
          <property name="severity" value="warning"/>
          <property name="classes" value="${checkstyle.illegalInstantiations}"/>
        </module>
        <module name="InnerAssignment">
          <property name="severity" value="warning"/>
        </module>

<!-- we need to wait for checkstyle 3.4 before we can enable magic number check:
     bug in checkstyle (NumberFormatException when parsing correct numbers) fixed in 3.4
        <module name="MagicNumber">
          <property name="ignoreNumbers" value="-1, 0, 1, 2, 4, 8, 16, 24, 255, 256"/>
          <property name="severity" value="warning"/>
        </module>
-->
        <module name="MissingSwitchDefault">
          <property name="severity" value="warning"/>
        </module>
        <module name="SimplifyBooleanExpression">
          <property name="severity" value="warning"/>
        </module>
        <module name="SimplifyBooleanReturn">
          <property name="severity" value="warning"/>
        </module>

        <module name="FinalLocalVariable">
          <property name="severity" value="ignore"/> <!-- TODO: warning then error -->
          <property name="tokens" value="PARAMETER_DEF, VARIABLE_DEF"/>
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- best suited for APIs <module name="DesignForExtension"/> -->
        <module name="FinalClass">
          <property name="severity" value="warning"/>
        </module>
        <module name="HideUtilityClassConstructor">
          <property name="severity" value="warning"/>
        </module>
        <module name="InterfaceIsType">
          <property name="severity" value="warning"/>
        </module>
        <module name="VisibilityModifier">
          <property name="severity" value="warning"/> <!-- TODO: This should REALLY be "error"! -->
          <property name="publicMemberPattern" value="${checkstyle.pattern.publicmember}"/>
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
          <property name="severity" value="warning"/>
        </module>
        <!-- I guess we don't want final params for now: <module name="FinalParameters"/> -->
        <module name="GenericIllegalRegexp">
          <property name="severity" value="warning"/>
          <property name="format" value="\s+$"/>
          <property name="message" value="Line has trailing spaces."/>
        </module>
        <module name="TodoComment">
          <property name="severity" value="warning"/>
          <property name="format" value="xTODO:x"/>
        </module>
        <module name="UpperEll"/>

    </module>

</module>
