<!-- ********************************************************************** -->
<!--                                    OpenORB                             -->
<!--                                   build file                           -->
<!-- NOTE:                                                                  -->
<!--   The idl dependecies are as sophisticated as possible now, but one    -->
<!--   issue remains. Most of the files include orb.idl for types they use. -->
<!--   When one of the files that are included from orb.idl changes all the -->
<!--   files that depend on it, i.e. include it, must be recompiled. This   -->
<!--   is currently not working. What is working is that the dependencies   -->
<!--   in the same idl package (orb,openorb,interop,misc) are working, but  -->
<!--   not over idl package boundaries. That means when you change the type -->
<!--   CORBA::OctetSeq that is used in Codec.idl from the misc.idl package  -->
<!--   the dependency rules will not automatically detect that the misc.idl -->
<!--   package has to be regenerated, only orb.idl will be generated in     -->
<!--   this case.                                                           -->
<!-- ********************************************************************** -->

<!-- $Id: build.xml,v 1.187 2005/07/12 01:00:02 pimp-rod Exp $ -->

<project name="OpenORB" default="default-target" basedir="..">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)

    ant.properties in the user.home directory can hold global
    ant settings that should be applied to any ant invocation.

    The local.properties file should contain settings only for
    the local project.
  -->
  <property name="buildfile-version" value="$Id: build.xml,v 1.187 2005/07/12 01:00:02 pimp-rod Exp $" />

  <property file="../personal.properties" />
  <property file="local.properties" />
  <property file="../tools/global.properties" />
  <property file="${user.home}/ant.properties" />

  <!-- For version or name changes modify the values below:
     NAME    - Name of the package.
     SPEC    - Specification this package implements.
  -->
  <property name="NAME_LONG"                   value="OpenORB" />
  <property name="NAME_SHORT"                  value="orb" />
  <property name="SPEC_NAME"                   value="CORBA/IIOP" />
  <property name="SPEC_VERSION_MAJOR"          value="2" />
  <property name="SPEC_VERSION_MINOR"          value="4" />
  <property name="SPEC_VERSION_MINOR_CHANGE"   value="2" />
  <property name="SPEC_URL"                    value="http://www.omg.org/cgi-bin/doc?formal/01-02-01" />
  <property name="MAIN_CLASS"                  value="org.openorb.orb.util.CreateORBProperties" />
  <property name="MANIFEST_CLASSPATH"          value="" />
  <property name="VENDOR_ID"                   value="org.openorb.community-project" />
  <property name="VENDOR"                      value="OpenORB Community Project" />
  <property name="TOOLS_NAME"                  value="org/openorb/compiler/IdlCompiler" />
  <property name="TOOLS_MAIN_CLASS"            value="org.openorb.compiler.IdlCompiler" />
  <property name="TOOLS_MANIFEST_CLASSPATH"    value="" />
  <property name="OMG_NAME"                    value="org/omg" />
  <property name="OMG_MANIFEST_CLASSPATH"      value="" />
  <property name="EXAMPLES_NAME"               value="org/openorb/orb/examples" />
  <property name="EXAMPLES_MANIFEST_CLASSPATH" value="" />
  <property name="TEST_NAME"                   value="org/openorb/test/OpenORBTest" />
  <property name="TEST_MAIN_CLASS"             value="org.openorb.test.OpenORBTest" />
  <property name="TEST_MANIFEST_CLASSPATH"     value="" />

  <property name="project"                     value="${NAME_LONG}" />
  <property name="version"                     value="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_MINOR_CHANGE}" />
  <property name="spec.version"                value="${SPEC_VERSION_MAJOR}.${SPEC_VERSION_MINOR}.${SPEC_VERSION_MINOR_CHANGE}" />
  <property name="archive"                     value="${project}-${version}" />

  <property name="src"                         location="src"/>
  <property name="compiler.dir"                location="src/compiler" />
  <property name="src.dir"                     location="src/main" />
  <property name="etc.dir"                     location="src/etc" />
  <property name="test.dir"                    location="src/test" />
  <property name="omg.dir"                     location="src/omg" />
  <property name="examples.dir"                location="src/examples" />
  <property name="build.dir"                   location="build" />
  <property name="conf.dir"                    location="src/config" />
  <property name="lib.dir"                     location="lib" />
  <property name="endorsed.dir"                location="lib/endorsed" />
  <property name="bin.dir"                     location="bin" />
  <property name="dist.dir"                    location="dist" />
  <property name="gensrc.dir"                  location="${build.dir}/gensrc" />
  <property name="idl.dir"                     location="src/idl" />
  <property name="src.doc.dir"                 location="src/doc" />
  <property name="src.bin.dir"                 location="src/bin" />
  <property name="dist.doc.dir"                location="doc" />

  <property name="tools.dir"                   location="../tools" />

  <property name="build.debug"                 value="on" />
  <property name="build.deprecation"           value="off" />
  <property name="build.optimize"              value="off" />

  <property name="main-jar"                    value="openorb_${NAME_SHORT}-${version}.jar" />
  <property name="tools-jar"                   value="openorb_${NAME_SHORT}_tools-${version}.jar" />
  <property name="test-jar"                    value="openorb_${NAME_SHORT}_test-${version}.jar" />
  <property name="examples-jar"                value="openorb_${NAME_SHORT}_examples-${version}.jar" />
  <property name="omg-jar"                     value="openorb_${NAME_SHORT}_omg-${version}.jar" />
  <property name="javax-jar"                   value="openorb_${NAME_SHORT}_javax-${version}.jar" />
  <property name="main-classes-jar"            value="openorb_${NAME_SHORT}-classes-${version}.jar" />
  <property name="main-config-jar"             value="openorb_${NAME_SHORT}-config-${version}.jar" />

  <property name="endorsed.standards.override" location="lib/endorsed/${omg-jar}" />

  <property name="checkstyle-results"          location="${build.dir}/checkstyle-results.txt" />
  <property name="checkstyle-cache"            location="${build.dir}/checkstyle-cache.txt" />

  <property name="openorb.debug.trace"         value="FATAL" />
  <property name="openorb.debug.level"         value="OFF" />

  <!-- =============================== -->
  <!--     CLASSPATH used to build     -->
  <!-- =============================== -->
  <path id="project.class.path">
    <pathelement path="${build.dir}/compiler" />
    <pathelement path="${build.dir}/main" />
    <pathelement path="${build.dir}/test" />
    <pathelement path="${build.dir}/omg" />
    <pathelement path="${build.dir}/examples" />

    <fileset dir="..">
      <exclude name="**/build/*"/>
      <include name="${NAME_LONG}/lib/ext/*.jar"/>
      <include name="tools/lib/**/*.jar"/>
    </fileset>
  </path>

  <path id="boot.class.path">
    <pathelement path="${build.dir}/omg" />
    <pathelement path="${sun.boot.class.path}" />
  </path>

  <path id="build.class.path">
    <path refid="project.class.path" />
    <fileset dir="${tools.dir}">
      <include name="lib/ext/build/**/*.jar"/>
    </fileset>
  </path>

  <path id="special.class.path">
    <pathelement path="${build.dir}/test" />
    <fileset dir="..">
      <include name="tools/lib/**/*.jar"/>
    </fileset>
  </path>


  <!-- =========================================== -->
  <!--   Default JVM arguments for running tests   -->
  <!-- =========================================== -->
  <condition property="deserializationEngine" value="lazy:native">
    <os name="AIX" />
  </condition>

  <property name="deserializationEngine" value="lazy:auto"/>

  <property name="default.jvmargs"  value="
      -Dfile.encoding=ISO8859-1
      -Diiop.deserializationEngine=${deserializationEngine}
      -Dopenorb.debug.trace=${openorb.debug.trace}
      -Dopenorb.debug.level=${openorb.debug.level}
      -Dorg.omg.CORBA.ORBClass=org.openorb.orb.core.ORB
      -Dorg.omg.CORBA.ORBSingletonClass=org.openorb.orb.core.ORBSingleton
      -Djavax.rmi.CORBA.StubClass=org.openorb.orb.rmi.StubDelegateImpl
      -Djavax.rmi.CORBA.UtilClass=org.openorb.orb.rmi.UtilDelegateImpl
      -Djavax.rmi.CORBA.PortableRemoteObjectClass=org.openorb.orb.rmi.PortableRemoteObjectDelegateImpl
  "/>


  <!-- =============================== -->
  <!--        Default target           -->
  <!-- =============================== -->
  <target name="default-target">
    <antcall target="${default-target}"/>
  </target>

  <!-- =============================== -->
  <!--               Help              -->
  <!-- =============================== -->
  <target name="help">
  <echo>
----------------------------------------------------------------------
${NAME_LONG} build targets
----------------------------------------------------------------------

dependency targets
==================
clean          : Delete everything that has been created by the build
                 process. Depends on clean-all.
clean-deep     : Performs a deep clean on all module dependencies.
doc            : Create the documentation. Depends on compile-javadoc,
                 compile-docbook.
examples       : Build the examples. Depends on main,build-examples,
                 create-examples-jar.
help (DEFAULT) : Show this list of dependency targets.
idl-compiler   : Build the IDL compiler. Depends on
                 build-idl-compiler, initialize-directory-tree.
idl            : Build the IDL compiler and the IDL files. Depends
                 on idl-compiler, omg-idl, main-idl.
main-idl       : Build the IDL compiler and the OpenORB IDL files. Depends
                 on idl-compiler, compile-main-idl.
omg-idl        : Build the IDL compiler and the OMG IDL files. Depends on
                 idl-compiler, compile-omg-idl.
checkstyle     : Run checkstyle on the source code.
install        : Install the jar files in a common directory. The common
                 directory can be specified via the install.path property
                 in the local.properties file. Depends on jar-all and doc.
jar-all        : Create all the jar files. Depends on main,compile-test-idl,
                 build-test,build-examples,create-main-jar,create-test-jar,
                 create-examples-jar.
jar            : Create the jar file. Depends on main,
                 create-main-jar.
jar-examples   : Create the examples jar file. Depends on examples,
                 create-examples-jar.
jar-omg        : Create the omg jar file. Depends on omg,
                 create-omg-jar.
jar-test       : Create the test jar file. Depends on main,
                 compile-test-idl,build-test,create-test-jar.
main           : Build the main classes. Depends on main-idl, build-main.
omg            : Build the org.omg.* classes. Depends on omg-idl,build-omg.
test           : Build and run the test cases. Depends on main,
                 build-test,create-test-jar,run-test.
release        : Cleanup everything, rebuild without debug info, and
                 create the tarballs. Depends on clean,
                 initialize-directory-tree, build-idl-compiler,
                 compile-idl, build-main, build-test, run-test,
                 build-examples, jar, doc, create-binary-tarball,
                 create-source-tarball
nightly        : Same as release, but compiles with debug info
targets        : Show a list of all targets. Depends on help.
version        : Show the current version of the package. Depends on
                 initialize-directory-tree.
    </echo>
  </target>

  <target name="targets" depends="help">
  <echo>
worker targets
==============
initialize-directory-tree     : Initialize the directory tree for the
                                build process.
dump-info                     : Show ant environment information.
create-manifest-file          : Create the main manifest file.
create-tools-manifest-file    : Create the tools manifest file.
create-tools-jar              : Create the tools jar file.
create-examples-manifest-file : Create the examples manifest file.
create-examples-jar           : Create the examples jart file.
create-test-manifest-file     : Create the test manifest file.
create-test-jar               : Create the test jar file.
clean-all                     : Delete everything that has been
                                created by the build.
clean-examples                : Delete the example classes.
clean-main                    : Delete the main classes and the
                                generated source.
clean-omg                     : Delete the org.omg.* classes.
clean-test                    : Delete the test classes.
compile-idl                   : Compile all IDL files. Depends on
                                compile-orb-idl, compile-interop-idl,
                                compile-misc-idl, compile-openorb-idl.
compile-interop-idl           : Compile the interop.idl file
                                (including uptodate check).
compile-main-idl              : Compile the main idl files.
compile-misc-idl              : Compile the misc.idl file (including
                                uptodate check).
compile-omg-idl               : Compile the omg idl files.
compile-orb-idl               : Compile the orb.idl file (including
                                uptodate check).
compile-openorb-idl           : Compile the openorb.idl file
                                (including uptodate check).
compile-test-idl              : Compile the test idl files
                                (including uptodate check).
build-idl-compiler            : Build the IDL compiler.
build-main                    : Build the main classes.
build-omg                     : Build the omg classes.
build-test                    : Build the test cases.
build-examples                : Build the examples.
build-codesetdb               : Build the CodeSet Database
create-main-jar               : Create the main jar files.
create-test-jar               : Create the test jar file.
create-examples-jar           : Create the examples jar file.
compile-docbook               : Create the HTML documentation.
compile-javadoc               : Create the javadoc documentation.
copy-bin-to-dir               : Copy all binary generated files to a
                                directory specified by the "bin" property
create-source-tarball         : Create the source tarball.
create-binary-tarball         : Create the binary tarball.
run-test                      : Run the test cases.
run-interop-test              : Run the interoperability test.
run-benchmark-test            : Run the benchmark test.
run-checkstyle                : Run checkstyle on the sources.
dos2unix                      : Converts all java, idl and xml files in
                                ${src} to unix format if not already.
purge-bak                     : Removes temporary files from ${src} directory
    </echo>
  </target>

  <target name="version" depends="dump-info"/>

  <target name="dos2unix">
    <fixcrlf
        eol="lf"
        eof="remove"
        srcdir="${src}"
        includes="**/*.java,**/*.idl,**/*.xml"
    />
    <fixcrlf
        eol="lf"
        eof="remove"
        srcdir="${basedir}"
        includes="WHATSNEW,WHATSNEW.RMIoverIIOP,README,local.properties"
    />
  </target>

  <target name="purge-bak">
    <delete>
      <fileset dir="${src}" includes="**/*.bak"/>
    </delete>
  </target>

  <!-- =============================== -->
  <!--            Manifest             -->
  <!-- =============================== -->
  <target name="create-manifest-file">
    <copy file="${etc.dir}/manifest.mf" toDir="${build.dir}" />
    <replace file="${build.dir}/manifest.mf" token="@@NAME@@" value="${NAME_LONG}" />
    <replace file="${build.dir}/manifest.mf" token="@@MANIFEST_CLASSPATH@@" value="${MANIFEST_CLASSPATH}" />
    <replace file="${build.dir}/manifest.mf" token="@@MAIN_CLASS@@" value="${MAIN_CLASS}" />
    <replace file="${build.dir}/manifest.mf" token="@@EXTENSION_NAME@@" value="${NAME_SHORT}" />
    <replace file="${build.dir}/manifest.mf" token="@@SPEC_TITLE@@" value="${SPEC_NAME}" />
    <replace file="${build.dir}/manifest.mf" token="@@SPEC_VERSION@@" value="${spec.version}" />
    <replace file="${build.dir}/manifest.mf" token="@@VENDOR_ID@@" value="${VENDOR_ID}" />
    <replace file="${build.dir}/manifest.mf" token="@@VENDOR@@" value="${VENDOR}" />
    <replace file="${build.dir}/manifest.mf" token="@@IMPL_VERSION@@" value="${version}" />
  </target>

  <target name="create-omg-manifest-file">
    <copy file="${etc.dir}/omg-manifest.mf" toDir="${build.dir}" />
    <replace file="${build.dir}/omg-manifest.mf" token="@@OMG_NAME@@"      value="${OMG_NAME}" />
    <replace file="${build.dir}/omg-manifest.mf" token="@@OMG_CLASSPATH@@" value="${OMG_MANIFEST_CLASSPATH}" />
  </target>

  <target name="create-tools-manifest-file">
    <copy file="${etc.dir}/tools-manifest.mf" toDir="${build.dir}" />
    <replace file="${build.dir}/tools-manifest.mf" token="@@TOOLS_NAME@@" value="${TOOLS_NAME}" />
    <replace file="${build.dir}/tools-manifest.mf" token="@@TOOLS_MANIFEST_CLASSPATH@@" value="${TOOLS_MANIFEST_CLASSPATH}" />
    <replace file="${build.dir}/tools-manifest.mf" token="@@TOOLS_MAIN_CLASS@@" value="${TOOLS_MAIN_CLASS}" />
  </target>

  <target name="create-examples-manifest-file">
    <copy file="${etc.dir}/examples-manifest.mf" toDir="${build.dir}" />
    <replace file="${build.dir}/examples-manifest.mf" token="@@EXAMPLES_NAME@@" value="${EXAMPLES_NAME}" />
    <replace file="${build.dir}/examples-manifest.mf" token="@@EXAMPLES_MANIFEST_CLASSPATH@@" value="${EXAMPLES_MANIFEST_CLASSPATH}" />
  </target>

  <target name="create-test-manifest-file">
    <copy file="${etc.dir}/test-manifest.mf" toDir="${build.dir}" />
    <replace file="${build.dir}/test-manifest.mf" token="@@TEST_NAME@@" value="${TEST_NAME}" />
    <replace file="${build.dir}/test-manifest.mf" token="@@TEST_MANIFEST_CLASSPATH@@" value="${TEST_MANIFEST_CLASSPATH}" />
    <replace file="${build.dir}/test-manifest.mf" token="@@TEST_MAIN_CLASS@@" value="${TEST_MAIN_CLASS}" />
  </target>



  <!-- =============================== -->
  <!--          Initialization         -->
  <!-- =============================== -->
  <target name="dump-info" depends="-timestamp" unless="suppress-dump-info">
    <echo>

       ++++                                    ++++    ++++++    ++++++
     +++  +++                                +++  +++  ++   +++  ++   +++
     ++    ++                                ++    ++  ++    ++  ++    ++
     ++    ++  ++ +++      ++++    ++ +++    ++    ++  ++    ++  ++   +++
     ++    ++  +++++++    ++++++   +++++++   ++    ++  ++   +++  +++++++
     ++    ++  ++    ++  ++    ++  ++    ++  ++    ++  ++++++    ++   +++
     ++    ++  ++    ++  ++++++++  ++    ++  ++    ++  ++  +++   ++    ++
     ++    ++  ++    ++  ++        ++    ++  ++    ++  ++   ++   ++    ++
     +++  +++  +++  +++  +++   ++  ++    ++  +++  +++  ++   ++   ++   +++
       ++++    ++ +++      +++++   ++    ++    ++++    ++    ++  ++++++
               ++
               ++

     - Vendor : ${VENDOR}

     - Module : ${project}
     - Version: ${version}

     - Contact: mailto:openorb-users@lists.sf.net

    </echo>
    <echo message="buildfile-version=${buildfile-version}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
    <echo message="build.debug=${build.debug}" />
    <echo message="build.deprecation=${build.debug}" />
    <echo message="build.optimize=${build.debug}" />
  </target>

  <target name="-timestamp">
    <tstamp>
      <format property="timestamp" pattern="yyyy-MM-dd hh:mm:ss z (zzzz)"/>
    </tstamp>
  </target>

  <target name="initialize-directory-tree" depends="-timestamp,dump-info">
    <mkdir dir="${build.dir}/compiler" />
    <mkdir dir="${build.dir}/main/org/openorb/config" />
    <mkdir dir="${build.dir}/main/org/openorb/idl" />
    <mkdir dir="${build.dir}/main/org/openorb/orb/config" />
    <mkdir dir="${build.dir}/omg" />
    <mkdir dir="${build.dir}/test" />
    <mkdir dir="${build.dir}/examples" />
    <mkdir dir="${gensrc.dir}/main/org/openorb" />
    <mkdir dir="${gensrc.dir}/omg" />
    <mkdir dir="${gensrc.dir}/test" />
    <mkdir dir="${gensrc.dir}/examples" />
    <mkdir dir="${lib.dir}/endorsed" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.doc.dir}" />

    <copy todir="${build.dir}/main/org/openorb/config">
      <fileset dir="${conf.dir}" includes="*.xml" />
    </copy>

    <copy todir="${build.dir}/main/org/openorb/idl">
      <fileset dir="${idl.dir}" includes="*.idl" />
    </copy>

    <copy todir="${bin.dir}">
      <fileset dir="${src.bin.dir}" includes="*" />
    </copy>
    <chmod dir="${bin.dir}" perm="ugo+rx" includes="*"/>
  </target>

  <target name="-init-build"
          depends="initialize-directory-tree, -create-tools-module-jar" >
  </target>

  <target name="-create-tools-module-jar"
          depends="-check-tools-module-jar"
          if="must-create-tools-module-jar">

    <echo>building tools module...</echo>
    <ant antfile="${tools.dir}/src/build.xml"
         target="jar"
         inheritall="false">

      <property name="suppress-dump-info" value="true"/>
    </ant>
    <echo>...built tools module</echo>
  </target>

  <target name="-check-tools-module-jar">

    <condition property="must-create-tools-module-jar">
      <or>
        <isset property="assume-modified"/>
        <not>
          <available resource="tools-module.tag" classpathref="project.class.path"/>
        </not>
      </or>
    </condition>
  </target>

  <!-- =============================== -->
  <!--            Clean up             -->
  <!-- =============================== -->
  <target name="clean" depends="clean-all">
  </target>

  <target name="clean-all">
    <delete failonerror="false" dir="${build.dir}" />
    <delete failonerror="false" dir="${dist.dir}" />
    <delete failonerror="false" dir="${dist.doc.dir}" />

    <delete failonerror="false" quiet="true">
      <fileset dir="${bin.dir}" includes="*" excludes=".cvsignore" />
      <fileset dir="${lib.dir}" includes="**/*.jar" />
      <fileset dir="${basedir}" includes="**/*.log" />
      <fileset dir="${user.dir}" includes="**/*.cache" />
    </delete>
  </target>

  <target name="clean-deep" depends="clean" >
    <echo>cleaning tools module...</echo>
    <ant antfile="${tools.dir}/src/build.xml"
         target="clean-deep"
         inheritall="false">

      <property name="suppress-dump-info" value="true"/>
    </ant>
    <echo>...cleaned tools module</echo>
  </target>

  <target name="clean-main">
    <delete failonerror="false" quiet="true" file="${lib.dir}/${main-jar}" />
    <delete failonerror="false" quiet="true" file="${lib.dir}/${tools-jar}" />
    <delete failonerror="false" quiet="true">
      <fileset dir="${build.dir}/main" includes="**/*.class" />
    </delete>
    <delete failonerror="false" quiet="true">
      <fileset dir="${gensrc.dir}/main" includes="**/*.java" />
    </delete>
  </target>

  <target name="clean-test">
    <delete failonerror="false" quiet="true">
      <fileset dir="${build.dir}/test" includes="**/*.class" />
    </delete>
    <delete failonerror="false" quiet="true" dir="${gensrc.dir}/test" />
    <delete failonerror="false" quiet="true" file="${lib.dir}/${test-jar}" />
  </target>

  <target name="clean-examples">
    <delete failonerror="false" quiet="true">
      <fileset dir="${build.dir}/examples" includes="**/*.class" />
    </delete>
    <delete failonerror="false" quiet="true" dir="${gensrc.dir}/examples" />
    <delete failonerror="false" quiet="true" file="${lib.dir}/${examples-jar}" />
  </target>

  <target name="clean-omg">
    <delete failonerror="false" quiet="true" file="${endorsed.dir}/${omg-jar}" />
    <delete failonerror="false" quiet="true">
      <fileset dir="${gensrc.dir}/omg" includes="**/*.java" />
    </delete>
    <delete failonerror="false" quiet="true">
      <fileset dir="${build.dir}/omg" includes="**/*.class" />
    </delete>
  </target>



  <!-- =============================== -->
  <!--            IDL compiler         -->
  <!-- =============================== -->
  <target name="idl-compiler" depends="-init-build,build-idl-compiler,-compiler-taskdef"/>

  <target name="build-idl-compiler">
    <javac srcdir="${compiler.dir}"
           destdir="${build.dir}/compiler"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}" >
      <include name="org/openorb/compiler/**" />
      <exclude name="org/openorb/compiler/taskdefs/**" />
      <exclude name="org/openorb/compiler/ir/**" />
      <classpath refid="project.class.path" />
    </javac>

    <javac srcdir="${compiler.dir}"
           destdir="${build.dir}/compiler"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}" >
      <include name="org/openorb/compiler/taskdefs/**" />
      <classpath refid="build.class.path" />
    </javac>
  </target>

  <target name="-compiler-taskdef">
    <!--<taskdef resource="java2idl.properties">-->
    <taskdef name="java2idl" classname="org.openorb.compiler.taskdefs.Java2Idl">
      <classpath refid="build.class.path"/>
    </taskdef>
    <taskdef name="idl2java" classname="org.openorb.compiler.taskdefs.Idl2Java">
      <classpath refid="build.class.path"/>
    </taskdef>
  </target>

  <!-- =============================== -->
  <!--                IDL              -->
  <!-- =============================== -->
  <target name="idl" depends="idl-compiler,compile-main-idl,compile-omg-idl"/>

  <target name="main-idl" depends="idl-compiler,compile-main-idl"/>
  <target name="compile-main-idl" depends="compile-openorb-idl"/>

  <target name="omg-idl" depends="idl-compiler,compile-omg-idl"/>
  <target name="compile-omg-idl" depends="compile-orb-idl,compile-interop-idl,compile-misc-idl">

<!--

#!/bin/sh
# To generate the include lines for the following delete command first
# comment out the delete line, then generate the idl target, cd to the
# src/main directory and execute the following script:
for i in $(find org/omg -name \*.java -print | sort)
do
  if [ -f ../../build/gensrc/$i ]
  then
    echo $i
    echo '        <include name="$i" />' >> tmp-fls
  fi
done

-->
    <!-- The reason why the generated files are deleted again is that the
         files generated are missing certain adaptions, e.g. the system
         exceptions must be derived from SystemException, but the idl
         compiler automatically derives the exceptions from UserException.
         Therefore the modified versions of those files are checked into
         src/main subtree and they need to be deleted from the latest idl
         compile otherwise further compilation fails with a duplicate
         class exception. -->
    <delete quiet="false">
      <fileset dir="${gensrc.dir}/omg">
        <include name="org/omg/CORBA/AbstractBaseHelper.java" />
        <include name="org/omg/CORBA/ACTIVITY_COMPLETED.java" />
        <include name="org/omg/CORBA/ACTIVITY_REQUIRED.java" />
        <include name="org/omg/CORBA/BAD_CONTEXT.java" />
        <include name="org/omg/CORBA/BAD_INV_ORDER.java" />
        <include name="org/omg/CORBA/BAD_OPERATION.java" />
        <include name="org/omg/CORBA/BAD_PARAM.java" />
        <include name="org/omg/CORBA/BAD_QOS.java" />
        <include name="org/omg/CORBA/BAD_TYPECODE.java" />
        <include name="org/omg/CORBA/CODESET_INCOMPATIBLE.java" />
        <include name="org/omg/CORBA/COMM_FAILURE.java" />
        <include name="org/omg/CORBA/DATA_CONVERSION.java" />
        <include name="org/omg/CORBA/FREE_MEM.java" />
        <include name="org/omg/CORBA/IMP_LIMIT.java" />
        <include name="org/omg/CORBA/INITIALIZE.java" />
        <include name="org/omg/CORBA/INTERNAL.java" />
        <include name="org/omg/CORBA/INTF_REPOS.java" />
        <include name="org/omg/CORBA/INVALID_TRANSACTION.java" />
        <include name="org/omg/CORBA/INVALID_ACTIVITY.java" />
        <include name="org/omg/CORBA/INV_FLAG.java" />
        <include name="org/omg/CORBA/INV_IDENT.java" />
        <include name="org/omg/CORBA/INV_OBJREF.java" />
        <include name="org/omg/CORBA/INV_POLICY.java" />
        <include name="org/omg/CORBA/MARSHAL.java" />
        <include name="org/omg/CORBA/NO_IMPLEMENT.java" />
        <include name="org/omg/CORBA/NO_MEMORY.java" />
        <include name="org/omg/CORBA/NO_PERMISSION.java" />
        <include name="org/omg/CORBA/NO_RESOURCES.java" />
        <include name="org/omg/CORBA/NO_RESPONSE.java" />
        <include name="org/omg/CORBA/OBJECT_NOT_EXIST.java" />
        <include name="org/omg/CORBA/OBJ_ADAPTER.java" />
        <include name="org/omg/CORBA/PERSIST_STORE.java" />
        <include name="org/omg/CORBA/REBIND.java" />
        <include name="org/omg/CORBA/TIMEOUT.java" />
        <include name="org/omg/CORBA/TRANSACTION_build.java" />
        <include name="org/omg/CORBA/TRANSACTION_MODE.java" />
        <include name="org/omg/CORBA/TRANSACTION_REQUIRED.java" />
        <include name="org/omg/CORBA/TRANSACTION_ROLLEDBACK.java" />
        <include name="org/omg/CORBA/TRANSACTION_UNAVAILABLE.java" />
        <include name="org/omg/CORBA/TRANSIENT.java" />
        <include name="org/omg/CORBA/UNKNOWN.java" />
      </fileset>
    </delete>
  </target>

<!--   NOT USED ! TODO/FIXME
          Polling.idl     <- not implemented !!!???
-->

  <target name="compile-interop-idl" depends="-compiler-taskdef" >
    <idl2java cachefile="${build.dir}/idl2java.cache"
              srcdir="${idl.dir}"
              destdir="${gensrc.dir}/omg"
              portablehelper="true"
              includes="interop.idl"
              includeorbidl="false"/>
  </target>

  <target name="compile-misc-idl" depends="-compiler-taskdef" >
    <idl2java cachefile="${build.dir}/idl2java.cache"
              includepath="${idl.dir};${idl.dir}/test"
              generateall="true"
              srcdir="${idl.dir}"
              destdir="${gensrc.dir}/omg"
              portablehelper="true"
              includes="misc.idl"
              includeorbidl="false" />
  </target>

  <target name="compile-orb-idl" depends="-compiler-taskdef" >
    <idl2java cachefile="${build.dir}/idl2java.cache"
              includepath="${idl.dir};${idl.dir}/test"
              generateall="true"
              srcdir="${idl.dir}"
              destdir="${gensrc.dir}/omg"
              portablehelper="true"
              includes="orb.idl"
              includeorbidl="false" />
  </target>

  <target name="compile-openorb-idl" depends="-compiler-taskdef" >
    <idl2java cachefile="${build.dir}/idl2java.cache"
              includepath="${idl.dir};${idl.dir}/test"
              generateall="true"
              srcdir="${idl.dir}"
              destdir="${gensrc.dir}/main"
              includes="openorb.idl"
              includeorbidl="false" />
    <delete dir="${gensrc.dir}/main/org/omg" />
  </target>



  <!-- =============================== -->
  <!--            OMG                  -->
  <!-- =============================== -->
  <target name="omg" depends="omg-idl,build-omg"/>

  <target name="build-omg">
    <javac srcdir="${omg.dir};${gensrc.dir}/omg"
           destdir="${build.dir}/omg"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}">
      <classpath refid="project.class.path" />
    </javac>
  </target>



  <!-- =============================== -->
  <!--            Main                 -->
  <!-- =============================== -->
  <target name="main" depends="idl,omg,build-main"/>

  <target name="build-main">
    <javac srcdir="${src.dir};${gensrc.dir}/main"
           destdir="${build.dir}/main"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}"
           bootclasspath="${build.dir}/omg"
           includeJavaRuntime="true" >
      <classpath refid="project.class.path" />
    </javac>
  </target>



  <!-- =============================== -->
  <!--              Inspect            -->
  <!--                                 -->
  <!-- Exclude files that are either   -->
  <!-- generated automatically or are  -->
  <!-- marked deprecated.              -->
  <!-- =============================== -->
  <target name="checkstyle" depends="initialize-directory-tree,run-checkstyle" />

  <target name="run-checkstyle">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="build.class.path" />
    </taskdef>

    <echo message="Checking org.openorb.* classes..." />
    <checkstyle
      config="${tools.dir}/etc/checkstyleconf.xml"
      properties="${tools.dir}/etc/checkstyle.properties"
      failOnViolation="true">
      <fileset dir="${src.dir}"
               includes="**/*.java"
               excludes="org/openorb/orb/iiop/CodeSetDatabase.java,org/openorb/orb/rmi/_Remote_Stub.java"/>
      <fileset dir="${examples.dir}"
               includes="**/*.java"/>
      <fileset dir="${test.dir}"
               includes="**/*.java"
               excludes="**/bench/**,**/TypeHolder.java"/>
      <!-- some org.omg interfaces contain method names that start with an underscore -->
      <property key="checkstyle.pattern.method" value="^_?[a-z](_?[a-zA-Z0-9]+)*$"/>
    </checkstyle>
    <echo message="Checking org.openorb.compiler.* classes..." />
    <checkstyle
      config="${tools.dir}/etc/checkstyleconf.xml"
      properties="${tools.dir}/etc/checkstyle.properties"
      failOnViolation="true">
      <property key="checkstyle.maxfilelen" value="3700"/>
      <property key="checkstyle.maxmethodlen" value="420"/>
      <fileset dir="${compiler.dir}"
               includes="org/openorb/compiler/*.java,org/openorb/compiler/taskdefs/**/*.java,org/openorb/compiler/rmi/**/*.java" />
    </checkstyle>
    <!-- Because the classes from org.omg.* are not under our control
         we don't have influence on the names and other conventions.
         In order to get checkstyle control the classes we need to adapt
         a few of our general settings here. -->
    <echo message="Checking org.omg.* classes..." />
    <checkstyle
      config="${tools.dir}/etc/checkstyleconf.xml"
      properties="${tools.dir}/etc/checkstyle.properties"
      failOnViolation="true">
      <property key="checkstyle.pattern.member" value="^value|offset|minor|completed|originalEx|except|servant|(m_[a-z](_?[a-zA-Z0-9])*$)"/>

      <property key="checkstyle.pattern.method" value="^_?[a-z](_?[a-zA-Z0-9]+)*$"/>
      <property key="checkstyle.pattern.const" value="^[A-Z](_?[A-Z0-9]+)*$|value"/>
      <property key="checkstyle.pattern.package" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9]*)*$|org.omg.CORBA_2_3.*"/>
      <property key="checkstyle.pattern.publicmember" value="value|offset|minor|completed|originalEx|except|servant"/>
      <property key="checkstyle.pattern.type" value="^[A-Z](_?[A-Za-z]+)*$"/>
      <!-- TODO: Exclude:
          "redundant 'public' modifier",
          "utility classes should not have a public or default constructor."
          "interfaces should describe a type and hence have methods"
          "'xyz' hides a field"
        -->
      <fileset dir="${omg.dir}"
               includes="org/omg/**/*.java"/>
    </checkstyle>
  </target>



  <!-- =============================== -->
  <!--         CodeSet Database        -->
  <!-- =============================== -->
  <target name="build-codesetdb">
    <java failonerror="true" classname="org.openorb.iiop.CodeSetDatabaseInitializer" fork="true">
      <classpath refid="project.class.path" />
      <jvmarg line="-Xbootclasspath:${endorsed.standards.override}:${sun.boot.class.path}" />
      <arg line="${src.dir}/org/openorb/iiop/cs_registry1_2h.txt" />
    </java>
    <move file="CodeSetDatabase.java" todir="${src.dir}/org/openorb/iiop"/>
  </target>



  <!-- =============================== -->
  <!--              Test               -->
  <!-- =============================== -->
  <target name="test" depends="jar,jar-test,run-test"/>
  <target name="special-test" depends="jar,jar-test,run-special-test"/>

  <target name="compile-test-idl"  depends="-compiler-taskdef" >
    <idl2java cachefile="${build.dir}/idl2java.cache"
              srcdir="${idl.dir}/test"
              includes="test.idl"
              generateall="true"
              destdir="${gensrc.dir}/test"
              includepath="${idl.dir};${idl.dir}/test"
              includeorbidl="false"
              uptodatechecks="false" />
    <delete failonerror="false" quiet="true" dir="${gensrc.dir}/test/org/omg" />
    <javac srcdir="${test.dir};${gensrc.dir}/test"
           destdir="${build.dir}/test"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}" >
      <classpath refid="build.class.path" />
    </javac>
    <java2idl cachefile="${build.dir}/java2idl.cache"
              includes="org/openorb/orb/test/rmi/complex/RemoteComplex.class,org/openorb/orb/test/rmi/primitive/RemoteEcho.class,org/openorb/orb/test/rmi/exceptions/ExceptionTestRemote.class"
              destdir="${gensrc.dir}/test"
              generateidl="false"
              generatestub="true"
              generatetie="true">
      <src refid="build.class.path" />
    </java2idl>
  </target>

  <target name="build-test" depends="compile-test-idl">
    <javac srcdir="${test.dir};${gensrc.dir}/test"
           destdir="${build.dir}/test"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}"
           bootclasspath="${build.dir}/omg"
           includeJavaRuntime="true" >
      <classpath refid="build.class.path" />
    </javac>
    <javac srcdir="${test.dir}"
           destdir="${build.dir}/test"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}" >
      <classpath refid="build.class.path" />
    </javac>
    <java2idl cachefile="${build.dir}/java2idl.cache"
              includes="org/openorb/rmi/test/complex/RemoteComplex.class,org/openorb/rmi/test/primitive/RemoteEcho.class,org/openorb/rmi/test/exceptions/ExceptionTestRemote.class"
              destdir="${gensrc.dir}/test"
              generateidl="false"
              generatestub="true"
              generatetie="true">
      <src refid="build.class.path" />
    </java2idl>
    <javac srcdir="${gensrc.dir}/test"
           destdir="${build.dir}/test"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}" >
      <classpath refid="build.class.path" />
    </javac>
  </target>

  <target name="run-test" depends="run-orb-test,run-rmiiiop-test"/>

  <target name="run-orb-test">
    <echo message="Running OpenORB tests (useNativeLibrary=${useNativeLibrary})..." />
    <java failonerror="true"
          classname="junit.textui.TestRunner"
          fork="yes">
      <classpath refid="build.class.path" />
      <jvmarg value="-Xbootclasspath/p:${endorsed.standards.override}" />
      <jvmarg line="${default.jvmargs}" />
      <arg line="org.openorb.orb.test.OpenORBTest" />
    </java>
  </target>

  <target name="run-rmiiiop-test">
    <echo message="Running RMI-IIOP tests  (useNativeLibrary=${useNativeLibrary})..." />
    <java failonerror="true"
          classname="junit.textui.TestRunner"
          fork="yes">
      <classpath refid="build.class.path" />
      <jvmarg line="${default.jvmargs}" />
      <arg line="org.openorb.orb.test.rmi.RMIoverIIOPTest" />
    </java>
    <echo message="Running RMI-IIOP tests with local invocations activated..." />
    <java failonerror="true"
          classname="junit.textui.TestRunner"
          fork="yes">
      <classpath refid="build.class.path" />
      <jvmarg line="${default.jvmargs}" />
      <jvmarg value="-DlocalInvocations=true" />
      <arg line="org.openorb.orb.test.rmi.RMIoverIIOPTest" />
    </java>
  </target>

  <target name="run-special-test">
    <java failonerror="true"
          classname="junit.textui.TestRunner"
          fork="yes">
      <classpath refid="special.class.path" />
      <jvmarg value="-Xbootclasspath/p:${endorsed.standards.override}" />
      <jvmarg value="-Dfile.encoding=ISO8859-1" />
      <jvmarg value="-Dopenorb.debug.trace=${openorb.debug.trace}" />
      <jvmarg value="-Dopenorb.debug.level=${openorb.debug.level}" />
      <jvmarg value="-Dopenorb.home.path=${openorb.home.path}" />
      <arg line="org.openorb.orb.test.corba.SingletonClassLoaderTest" />
    </java>
  </target>

  <target name="run-single-test">
    <echo message="Running a single JUnit test case '${junit.test.case}' (useNativeLibrary=${useNativeLibrary})..."/>
    <java failonerror="true"
          classname="junit.textui.TestRunner"
          fork="yes">
      <classpath refid="build.class.path" />
      <jvmarg value="-Xbootclasspath/p:${endorsed.standards.override}" />
      <jvmarg line="${default.jvmargs}" />
      <arg line="${junit.test.case}" />
    </java>
  </target>

  <target name="run-interop-test">
    <java fork="yes" failonerror="true"
          classname="org.openorb.orb.bench.Main">
      <classpath refid="build.class.path" />
      <jvmarg line="${default.jvmargs}" />
      <arg line="-interop" />
    </java>
  </target>

  <target name="run-benchmark-test">
    <java fork="yes" failonerror="true"
          classname="org.openorb.orb.bench.Main">
      <classpath refid="build.class.path" />
      <jvmarg line="${default.jvmargs}" />
      <arg line="-benchmark" />
    </java>
  </target>


  <!-- =============================== -->
  <!--             Examples            -->
  <!-- =============================== -->
  <target name="examples" depends="main,build-examples"/>

  <target name="build-examples" depends="-compiler-taskdef" >
    <mkdir dir="${build.dir}/examples" />
    <mkdir dir="${gensrc.dir}/examples" />

    <!-- compile the IDL for all the examples -->
    <!-- examples requiring BOA -->
    <echo message="Building BOA examples"/>
    <idl2java cachefile="${build.dir}/idl2java.cache"
              srcdir="${examples.dir}"
              includepath="${idl.dir}"
              destdir="${gensrc.dir}/examples"
              includes="org/openorb/orb/examples/dsi/boa/Sample.idl,org/openorb/orb/examples/any/poly.idl"
              boamode="true"
              includeorbidl="false" />
    <!-- examples requiring POA -->
    <echo message="Building POA examples"/>
    <idl2java cachefile="${build.dir}/idl2java.cache"
              includepath="${idl.dir}"
              destdir="${gensrc.dir}/examples"
              srcdir="${examples.dir}"
              includeorbidl="false">
      <include name="org/openorb/orb/examples/dsi/poa/Sample.idl" />
      <include name="org/openorb/orb/examples/dynany/poly.idl" />
      <include name="org/openorb/orb/examples/obv/custom/custom.idl" />
      <include name="org/openorb/orb/examples/obv/inheritance/inheritance.idl" />
      <include name="org/openorb/orb/examples/obv/support/abs/support.idl" />
      <include name="org/openorb/orb/examples/obv/support/itf/support.idl" />
      <include name="org/openorb/orb/examples/obv/truncate/truncate.idl" />
      <include name="org/openorb/orb/examples/obv/valuebox/box.idl" />
      <include name="org/openorb/orb/examples/obv/valuetype/value.idl" />
      <include name="org/openorb/orb/examples/poa/**/*.idl" />
      <include name="org/openorb/orb/examples/interceptors/interceptors.idl" />
      <include name="${EXAMPLES_NAME}/messaging/Timeout.idl" />
    </idl2java>

    <echo message="Building RMI examples"/>
    <javac srcdir="${examples.dir}/${EXAMPLES_NAME}/rmi"
           destdir="${build.dir}/examples"
           includes="**/*.java"
           debug="${build.debug}"
           deprecation="${build.deprecation}" >
      <classpath refid="project.class.path" />
      <exclude name="hello/HelloCORBAClient.java" />
    </javac>

    <java2idl cachefile="${build.dir}/java2idl.cache"
              includes="org/openorb/orb/examples/rmi/calculator/CalculatorInterface.class,org/openorb/orb/examples/rmi/trader/TraderInterface.class,org/openorb/orb/examples/rmi/hello/RemoteHello.class,org/openorb/orb/examples/rmi/simple/SimpleInterface.class"
              destdir="${gensrc.dir}/examples"
              generateidl="false"
              generatestub="true"
              generatetie="true">
      <src refid="project.class.path" />
    </java2idl>

<!--
    <idl2java cachefile="${build.dir}/idl2java.cache"
              includepath="${idl.dir}" destdir="${gensrc.dir}/examples"
              srcdir="${gensrc.dir}/examples" includeorbidl="false">
      <include name="org/openorb/orb/examples/rmi/hello/RemoteHello.idl" />
    </idl2java>
-->

    <javac srcdir="${examples.dir};${gensrc.dir}/examples"
           destdir="${build.dir}/examples"
           debug="${build.debug}"
           deprecation="${build.deprecation}"
           optimize="${build.optimize}"
           bootclasspath="${build.dir}/omg"
           includeJavaRuntime="true" >
      <exclude name="**/HelloCORBAClient.java" />
      <classpath refid="project.class.path" />
    </javac>
  </target>


  <!-- =============================== -->
  <!--          Distribution           -->
  <!-- =============================== -->
  <target name="jar-all" depends="jar,jar-test,jar-examples"/>
  <target name="jar" depends="main,create-compiler-jar,create-omg-jar,create-main-jar"/>
  <target name="jar-omg" depends="omg,create-omg-jar"/>
  <target name="jar-test" depends="build-test,create-test-jar"/>
  <target name="jar-examples" depends="examples,create-examples-jar"/>

  <target name="create-compiler-jar"
          depends="-check-compiler-jar-contents-modified"
          if="compiler-jar-contents-modified">
    <delete failonerror="false" file="${lib.dir}/${tools-jar}" />

    <antcall target="create-tools-manifest-file" />
    <jar jarfile="${lib.dir}/${tools-jar}"
         manifest="${build.dir}/tools-manifest.mf" >
      <fileset dir="${basedir}" includes="LICENSE.txt,EXOLAB.txt,README,WHATSNEW,WHATSNEW.RMIoverIIOP" />
      <fileset dir="${etc.dir}" includes="idl2java.properties,java2idl.properties"/>
      <zipfileset dir="${idl.dir}" includes="*.idl" prefix="org/openorb/idl" />
      <fileset dir="${build.dir}/compiler" includes="org/openorb/compiler/**/*.class" />
      <zipfileset dir="${conf.dir}" includes="*.xml,*.dtd" prefix="org/openorb/config" />
    </jar>
    <delete file="${build.dir}/tools-manifest.mf" />
  </target>

  <target name="-check-compiler-jar-contents-modified"
          description="Checks if compiler jar contents have been modified.">

    <condition property="compiler-jar-contents-modified">
      <or>
        <isset property="assume-modified"/>
        <not>
          <uptodate targetfile="${lib.dir}/${tools-jar}">
            <srcfiles dir="${basedir}" includes="LICENSE.txt,EXOLAB.txt,README,WHATSNEW,WHATSNEW.RMIoverIIOP" />
            <srcfiles dir="${idl.dir}" includes="*.idl"/>
            <srcfiles dir="${build.dir}/compiler" includes="org/openorb/compiler/**/*.class" />
            <srcfiles dir="${conf.dir}" includes="*.xml,*.dtd"/>
          </uptodate>
        </not>
      </or>
    </condition>
  </target>

  <target name="create-main-jar"
          depends="-check-main-jar-contents-modified"
          if="main-jar-contents-modified">
    <delete failonerror="false" file="${lib.dir}/${main-jar}" />

    <echo file="${build.dir}/OpenORB-module.tag">#OpenORB module tag file
      openorb.OpenORB.buildtime=${timestamp}
    </echo>

    <antcall target="create-manifest-file" />

    <jar jarfile="${lib.dir}/${main-jar}" manifest="${build.dir}/manifest.mf">
      <fileset dir="${build.dir}" includes="OpenORB-module.tag" />
      <fileset dir="${build.dir}/main" includes="**/*.class" />
      <fileset dir="${build.dir}/main/org/apache/orb/config" includes="*.properties,*.xml" />
      <zipfileset dir="${conf.dir}" includes="*.xml,*.dtd,*.properties" prefix="org/openorb/config" />
    </jar>
    <delete file="${build.dir}/manifest.mf" />
  </target>

  <target name="-check-main-jar-contents-modified"
          description="Checks if main jar contents have been modified.">

    <condition property="main-jar-contents-modified">
      <or>
        <isset property="assume-modified"/>
        <not>
          <uptodate targetfile="${lib.dir}/${main-jar}">
            <srcfiles dir="${build.dir}/main"/>
            <srcfiles dir="${build.dir}/main" includes="**/*.class" />
            <srcfiles dir="${build.dir}/main/org/apache/orb/config" includes="*.properties,*.xml" />
            <srcfiles dir="${conf.dir}" includes="*.xml,*.dtd,*.properties" />
          </uptodate>
        </not>
      </or>
    </condition>
  </target>

  <target name="create-omg-jar">
    <delete file="${endorsed.dir}/${omg-jar}" />
    <antcall target="create-omg-manifest-file" />
    <jar jarfile="${endorsed.dir}/${omg-jar}" manifest="${build.dir}/omg-manifest.mf" basedir="${build.dir}/omg" />
    <delete file="${build.dir}/omg-manifest.mf" />
  </target>

  <target name="create-test-jar">
    <copy todir="${build.dir}/test">
      <fileset dir="${test.dir}" includes="**/*.xml" />
    </copy>
    <delete file="${lib.dir}/${test-jar}" />
    <antcall target="create-test-manifest-file" />
    <jar jarfile="${lib.dir}/${test-jar}" manifest="${build.dir}/test-manifest.mf" basedir="${build.dir}/test" />
    <delete file="${build.dir}/test-manifest.mf" />
  </target>

  <target name="create-examples-jar">
    <delete file="${lib.dir}/${examples-jar}" />
    <antcall target="create-examples-manifest-file" />
    <jar jarfile="${lib.dir}/${examples-jar}" manifest="${build.dir}/examples-manifest.mf" basedir="${build.dir}/examples" />
    <delete file="${build.dir}/examples-manifest.mf" />
  </target>

  <target name="create-separate-main-jars"
          description="Creates the main jar as two separate jars containing classes and config" >
    <delete failonerror="false" file="${lib.dir}/${main-classes-jar}" />
    <delete failonerror="false" file="${lib.dir}/${main-config-jar}" />

    <echo file="${build.dir}/OpenORB-module.tag">#OpenORB module tag file
      openorb.OpenORB.buildtime=${timestamp}
    </echo>

    <antcall target="create-manifest-file" />

    <jar jarfile="${lib.dir}/${main-classes-jar}" manifest="${build.dir}/manifest.mf" >
      <fileset dir="${build.dir}" includes="OpenORB-module.tag" />
      <fileset dir="${build.dir}/main" includes="**/*.class" />
    </jar>
    <delete file="${build.dir}/manifest.mf" />

    <jar jarfile="${lib.dir}/${main-config-jar}" >
      <zipfileset dir="${conf.dir}" includes="*.xml,*.dtd,*.properties" prefix="org/openorb/config" />
    </jar>
  </target>


  <!-- =============================== -->
  <!--          Documentation          -->
  <!-- =============================== -->
  <target name="doc" depends="idl,compile-javadoc,compile-docbook" />

  <target name="compile-javadoc">
    <delete dir="${dist.doc.dir}/javadoc" />
    <mkdir   dir="${dist.doc.dir}/javadoc" />
    <javadoc destdir="${dist.doc.dir}/javadoc"
             doctitle="${project} ${version}"
             windowtitle="${project} ${version}"
             noindex="true"
             author="true"
             packagenames="org.openorb.orb.*,org.apache.orb.*"
             verbose="false"
             bootclasspathref="boot.class.path">
      <sourcepath>
        <pathelement path="${src.dir}"/>
      </sourcepath>
      <classpath refid="project.class.path" />
    </javadoc>
    <delete dir="${dist.doc.dir}/javadoc-omg" />
    <mkdir   dir="${dist.doc.dir}/javadoc-omg" />
    <javadoc destdir="${dist.doc.dir}/javadoc-omg"
             doctitle="${project} ${version}"
             windowtitle="${project} ${version}"
             noindex="true"
             author="true"
             packagenames="org.omg.*,javax.rmi.*"
             verbose="false">
      <sourcepath>
        <pathelement path="${omg.dir}"/>
        <pathelement path="${gensrc.dir}/omg"/>
      </sourcepath>
      <classpath refid="build.class.path" />
    </javadoc>
    <delete dir="${dist.doc.dir}/javadoc-examples" />
    <mkdir   dir="${dist.doc.dir}/javadoc-examples" />
    <javadoc destdir="${dist.doc.dir}/javadoc-examples"
             doctitle="${project} ${version} Examples"
             windowtitle="${project} ${version} Examples"
             noindex="true"
             author="true"
             packagenames="org.openorb.orb.examples.*"
             verbose="false"
             bootclasspathref="boot.class.path">
      <sourcepath>
        <pathelement path="${examples.dir}"/>
      </sourcepath>
      <classpath refid="build.class.path" />
    </javadoc>
    <delete dir="${dist.doc.dir}/javadoc-test" />
    <mkdir   dir="${dist.doc.dir}/javadoc-test" />
    <javadoc destdir="${dist.doc.dir}/javadoc-test"
             doctitle="${project} ${version} Test"
             windowtitle="${project} ${version} Test"
             noindex="true"
             author="true"
             packagenames="org.openorb.orb.test.*,org.openorb.orb.bench.*"
             verbose="false"
             bootclasspathref="boot.class.path">
      <sourcepath>
        <pathelement path="${test.dir}"/>
      </sourcepath>
      <classpath refid="build.class.path" />
    </javadoc>
  </target>


  <target name="compile-docbook">
    <copy file="${src.doc.dir}/${NAME_SHORT}.xml" tofile="${dist.doc.dir}/${NAME_SHORT}.xml"/>
    <copy file="${src.doc.dir}/rmi.xml" tofile="${dist.doc.dir}/rmi.xml"/>
    <replace file="${dist.doc.dir}/${NAME_SHORT}.xml" token="@docbook-dtd@" value="${tools.dir}/docbook/xml/docbookx.dtd"/>
    <replace file="${dist.doc.dir}/${NAME_SHORT}.xml" token="@intro@" value="${tools.dir}/src/doc/intro.xml"/>
    <replace file="${dist.doc.dir}/rmi.xml" token="@docbook-dtd@" value="${tools.dir}/docbook/xml/docbookx.dtd"/>
    <replace file="${dist.doc.dir}/rmi.xml" token="@intro@" value="${tools.dir}/src/doc/intro.xml"/>
    <!-- looks better but there are still xml parser classpath issues with jdk1.4
    <xslt in="${dist.doc.dir}/${NAME_SHORT}.xml"
          out="${dist.doc.dir}/${NAME_SHORT}.html"
          style="${tools.dir}/docbook/tcoo_html.xsl"
          classpathref="build.class.path"/>-->
    <java classname="org.apache.xalan.xslt.Process" fork="yes">
      <arg line="-IN ${dist.doc.dir}/${NAME_SHORT}.xml -XSL ${tools.dir}/docbook/tcoo_html.xsl -OUT ${dist.doc.dir}/${NAME_SHORT}.html" />
      <jvmarg line="-Djava.endorsed.dirs=${tools.dir}/lib/ext/build" />
      <classpath refid="build.class.path" />
    </java>
    <java classname="org.apache.xalan.xslt.Process" fork="yes">
      <arg line="-IN ${dist.doc.dir}/rmi.xml -XSL ${tools.dir}/docbook/tcoo_html.xsl -OUT ${dist.doc.dir}/rmi.html" />
      <jvmarg line="-Djava.endorsed.dirs=${tools.dir}/lib/ext/build" />
      <classpath refid="build.class.path" />
    </java>
<!--    <delete file="${dist.doc.dir}/${NAME_SHORT}.xml" /> -->
    <mkdir dir="${dist.doc.dir}/html_img"/>
    <copy todir="${dist.doc.dir}/html_img" >
       <fileset dir="${src.doc.dir}/images"/>
    </copy>
    <replace file="${dist.doc.dir}/${NAME_SHORT}.html" token="src/doc/images/" value="html_img/"/>
  </target>



  <!-- =============================== -->
  <!--          Tarballs               -->
  <!-- =============================== -->
  <target name="-tarball"
          depends="clean,checkstyle,jar-all,run-test,doc,create-binary-tarball,create-source-tarball">
  </target>


  <target name="release">
    <antcall target="-tarball" >
      <param name="build.debug"       value="off" />
      <param name="build.deprecation" value="on" />
      <param name="build.optimize"    value="on" />
    </antcall>
  </target>

  <target name="nightly">
    <antcall target="-tarball" >
      <param name="build.debug"       value="on" />
      <param name="build.deprecation" value="on" />
      <param name="build.optimize"    value="on" />
    </antcall>
  </target>

  <target name="create-source-tarball">
    <delete file="${dist.dir}/${archive}-src.tgz" />
    <delete file="${dist.dir}/${archive}-src.zip" />

    <mkdir dir="${build.dir}/src/${NAME_LONG}" />
    <mkdir dir="${build.dir}/src/${NAME_LONG}/src" />

    <copy todir="${build.dir}/src/${NAME_LONG}">
      <fileset dir=".">
        <include name="README" />
        <include name="WHATSNEW*" />
        <include name="local.properties" />
        <include name="*.bat" />
        <include name="*.sh" />
        <include name="*.txt" />
        <include name="setenv" />
      </fileset>
    </copy>
    <chmod file="${build.dir}/src/${NAME_LONG}/setenv" perm="ugo+rx"/>
    <chmod file="${build.dir}/src/${NAME_LONG}/build.sh" perm="ugo+rx"/>

    <copy todir="${build.dir}/src/${NAME_LONG}/src">
      <fileset dir="src">
        <exclude name="**/CVS/*" />
      </fileset>
    </copy>
    <chmod dir="${build.dir}/src/${NAME_LONG}/src/bin" perm="ugo+rx" includes="*"/>

    <tar compression="gzip"
         tarfile="${dist.dir}/${archive}-src.tgz"
         defaultexcludes="true">
      <tarfileset dir="${build.dir}/src" mode="755">
        <include name="${NAME_LONG}/setenv"/>
        <include name="${NAME_LONG}/build.sh"/>
        <include name="${NAME_LONG}/src/bin/*"/>
      </tarfileset>
      <tarfileset dir="${build.dir}/src">
        <include name="${NAME_LONG}/**/*"/>
        <exclude name="${NAME_LONG}/build.sh"/>
        <exclude name="${NAME_LONG}/setenv"/>
        <exclude name="${NAME_LONG}/src/bin/*"/>
      </tarfileset>
    </tar>
    <zip zipfile="${dist.dir}/${archive}-src.zip" basedir="${build.dir}/src"
         defaultexcludes="true" />

    <delete dir="${build.dir}/src" />
  </target>

  <!-- Auxiliary target to copy all binary files to a directory -->
  <target name="copy-bin-to-dir">
    <mkdir    dir="${bin}/bin" />
    <mkdir    dir="${bin}/lib" />
    <mkdir    dir="${bin}/lib/endorsed" />
    <mkdir    dir="${bin}/doc" />
    <mkdir    dir="${bin}/config" />

    <copy file="${basedir}/README"
              tofile="${bin}/README" />
    <copy file="${basedir}/LICENSE.txt"
              tofile="${bin}/LICENSE.txt" />
    <copy file="${basedir}/EXOLAB.txt"
              tofile="${bin}/EXOLAB.txt" />
    <copy file="${basedir}/WHATSNEW"
              tofile="${bin}/WHATSNEW" />
    <copy file="${basedir}/WHATSNEW.RMIoverIIOP"
              tofile="${bin}/WHATSNEW.RMIoverIIOP" />
    <copy file="${basedir}/setenv"
              tofile="${bin}/setenv" />
    <chmod dir="${bin}" perm="ugo+rx" includes="setenv"/>

    <copy todir="${bin}/bin" >
       <fileset dir="${src.bin.dir}">
         <exclude name="**/CVS/*" />
       </fileset>
    </copy>
    <chmod dir="${bin}/bin" perm="ugo+rx" includes="*"/>

    <copy file="${lib.dir}/${tools-jar}"
              tofile="${bin}/lib/${tools-jar}" />
    <copy file="${lib.dir}/${main-jar}"
              tofile="${bin}/lib/${main-jar}" />
    <copy file="${endorsed.dir}/${omg-jar}"
              tofile="${bin}/lib/endorsed/${omg-jar}" />
    <copy file="${lib.dir}/${examples-jar}"
              tofile="${bin}/lib/${examples-jar}" />
    <copy file="${lib.dir}/${test-jar}"
              tofile="${bin}/lib/${test-jar}" />

    <copy file="${conf.dir}/OpenORB.xml"
              tofile="${bin}/config/OpenORB.xml" />
    <copy file="${conf.dir}/default.xml"
              tofile="${bin}/config/default.xml" />
    <copy file="${conf.dir}/orb.properties"
              tofile="${bin}/config/orb.properties" />

    <copy file="${dist.doc.dir}/${NAME_SHORT}.html"
              tofile="${bin}/doc/${NAME_SHORT}.html" />
    <mkdir dir="${bin}/doc/html_img"/>
    <copy todir="${bin}/doc/html_img" >
       <fileset dir="${dist.doc.dir}/html_img"/>
    </copy>
    <copy todir="${bin}/doc/javadoc">
       <fileset dir="${dist.doc.dir}/javadoc" />
    </copy>
    <copy todir="${bin}/doc/javadoc-examples">
       <fileset dir="${dist.doc.dir}/javadoc-examples" />
    </copy>
    <copy todir="${bin}/doc/javadoc-test">
       <fileset dir="${dist.doc.dir}/javadoc-test" />
    </copy>
    <copy todir="${bin}/doc/javadoc-omg">
       <fileset dir="${dist.doc.dir}/javadoc-omg" />
    </copy>

    <copy todir="${bin}/idl" >
       <fileset dir="${idl.dir}">
         <exclude name="**/CVS/*" />
       </fileset>
    </copy>

    <copy todir="${bin}/examples">
       <fileset dir="${examples.dir}">
         <exclude name="**/CVS/*" />
       </fileset>
    </copy>

    <copy todir="${bin}/test">
       <fileset dir="${test.dir}">
         <exclude name="**/CVS/*" />
       </fileset>
    </copy>
  </target>

  <target name="create-binary-tarball">
    <property name="root" value="${build.dir}/distrib" />
    <property name="bin" value="${root}/${NAME_LONG}" />

    <delete   file="${dist.dir}/${archive}.tgz" />
    <delete   file="${dist.dir}/${archive}.zip" />
    <delete   dir="${bin}" />

    <mkdir    dir="${bin}" />

    <antcall target="copy-bin-to-dir"   >
      <param name="bin" value="${bin}" />
    </antcall>

    <tar compression="gzip"
         tarfile="${dist.dir}/${archive}.tgz">
      <tarfileset dir="${root}" mode="755">
        <include name="${NAME_LONG}/setenv"/>
        <include name="${NAME_LONG}/bin/*"/>
        <include name="${NAME_LONG}/config/*.sh"/>
      </tarfileset>
      <tarfileset dir="${root}">
        <include name="${NAME_LONG}/**/*"/>
        <exclude name="${NAME_LONG}/setenv"/>
        <exclude name="${NAME_LONG}/bin/*"/>
      </tarfileset>
    </tar>
    <zip basedir="${root}"
         zipfile="${dist.dir}/${archive}.zip" />

    <delete dir="${root}" />
  </target>


  <!-- =============================== -->
  <!--          Install                -->
  <!-- =============================== -->
  <target name="check-install-path">
    <available file="${install.path}" type="dir" property="install.path.present"/>
  </target>

  <target name="install" depends="check-install-path,jar-all,doc" if="install.path.present">
    <echo message="Installing to ${install.path}..." />
    <antcall target="copy-bin-to-dir" >
      <param name="bin"   value="${install.path}" />
    </antcall>
  </target>

</project>

