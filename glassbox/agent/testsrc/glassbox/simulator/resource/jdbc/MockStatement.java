/*
 * Copyright (c) 2005-2006 Glassbox Corporation, Contributors. All rights reserved.
 * This program along with all accompanying source code and applicable materials are made available under the 
 * terms of the Lesser Gnu Public License v2.1, which accompanies this distribution and is available at 
 * http://www.gnu.org/licenses/lgpl.txt
 */
package glassbox.simulator.resource.jdbc;

import glassbox.test.DelayingRunnable;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MockStatement implements Statement {

    protected static aspect VirtualMock {
        before(MockStatement stmt) throws SQLException : execution(* MockStatement+.execute*(..) throws SQLException) && this(stmt) {
            if (stmt.ex != null) {
                throw new SQLException(stmt.ex, mockSqlState, mockSqlErrorCode);
            }
            stmt.delayer.run();
        }
    }
    
    protected String ex = null;
    protected Connection conn = null;
    public static int mockSqlErrorCode = 3;
    public static String mockSqlState = "badSimulatedSqlState";
    
    protected DelayingRunnable delayer = new DelayingRunnable();
    
    public MockStatement(Connection conn) {
        this.conn = conn;
    }
    
    public void setExceptionString(String ex) {
        this.ex = ex;
    }

    public void setDelay(long delay) {
        delayer.setDelay(delay);
    }
    

    public ResultSet executeQuery(String sql) throws SQLException {
        
        return null;
    }

    public int executeUpdate(String sql) throws SQLException {
        
        return 0;
    }

    public void close() throws SQLException {
        

    }

    public int getMaxFieldSize() throws SQLException {
        
        return 0;
    }

    public void setMaxFieldSize(int max) throws SQLException {
        

    }

    public int getMaxRows() throws SQLException {
        
        return 0;
    }

    public void setMaxRows(int max) throws SQLException {
        

    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        

    }

    public int getQueryTimeout() throws SQLException {
        
        return 0;
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        

    }

    public void cancel() throws SQLException {
        

    }

    public SQLWarning getWarnings() throws SQLException {
        
        return null;
    }

    public void clearWarnings() throws SQLException {
        

    }

    public void setCursorName(String name) throws SQLException {
        

    }

    public boolean execute(String sql) throws SQLException {
        return false;
    }

    public ResultSet getResultSet() throws SQLException {
        
        return null;
    }

    public int getUpdateCount() throws SQLException {
        
        return 0;
    }

    public boolean getMoreResults() throws SQLException {
        
        return false;
    }

    public void setFetchDirection(int direction) throws SQLException {
        

    }

    public int getFetchDirection() throws SQLException {
        
        return 0;
    }

    public void setFetchSize(int rows) throws SQLException {
        

    }

    public int getFetchSize() throws SQLException {
        
        return 0;
    }

    public int getResultSetConcurrency() throws SQLException {
        
        return 0;
    }

    public int getResultSetType() throws SQLException {
        
        return 0;
    }

    public void addBatch(String sql) throws SQLException {
        

    }

    public void clearBatch() throws SQLException {
        

    }

    public int[] executeBatch() throws SQLException {
        
        return null;
    }

    public Connection getConnection() throws SQLException {        
        return conn;
    }

    public boolean getMoreResults(int current) throws SQLException {
        
        return false;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        
        return null;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        
        return 0;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        
        return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        
        return 0;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        
        return false;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        
        return false;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        
        return false;
    }

    public int getResultSetHoldability() throws SQLException {
        
        return 0;
    }

    // implement Java 1.5 and Java 1.6 JDBC methods for forward compatibility...
    public boolean isWrapperFor(Class arg0) throws SQLException {
        return false;
    }

    public Object unwrap(Class arg0) throws SQLException {
        return null;
    }

    public boolean isClosed() throws SQLException {
        return false;
    }

    public boolean isPoolable() throws SQLException {
        return false;
    }

    public void setPoolable(boolean poolable) throws SQLException {        
    }

}
