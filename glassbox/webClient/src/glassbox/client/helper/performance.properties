glassboxPerformanceWindowTitle=Glassbox
AboutTitle=About Glassbox
AboutMessage=Please visit www.glassbox.com
AboutMessageHeader=Product: Glassbox Troubleshooter
AboutMessageFooter=Copyright (c) 2006 Glassbox Corporation.

WebsitePaneStartupURL=http://www.glassbox.com/glassbox/Client.do
WebsitePaneErrorURL=http://www.glassbox.com/glassbox/ClientError.do


#Panels
#Core panels.
default.executiveSummary.panel=panels/executive_summary_panel.vm
default.technologySummary.panel=panels/technology_summary_panel.vm

failing.technologyDetails.panel=templates/fail_technology_details.vm
slow.technologyDetails.panel=templates/slow_technology_details.vm
normal.technologyDetails.panel=templates/normal_technology_details.vm

default.timespent.panel=panels/time_spent_panel.vm
default.inputURLs.panel=panels/input_urls_panel.vm
default.commonSolutions.panel=panels/common_solutions_panel.vm
default.ruledOut.panel=panels/ruled_out_panel.vm
default.inputurl.panel=panels/input_urls_panel.vm
stacktrace.panel=panels/stacktrace_panel.vm
database.panel=panels/database_panel.vm
empty.panel=panels/empty_panel.vm

#Problem Panels.
contention.problem.panel=panels/problems/contention_problem_panel.vm
slow.database.overall.problem.panel=panels/problems/slow_database_overall_problem_panel.vm
slow.method.problem.panel=panels/problems/slow_method_problem_panel.vm
slow.remote.call.problem.panel=panels/problems/slow_remote_call_problem_panel.vm
slow.remote.overall.problem.panel=panels/problems/slow_remote_overall_problem_panel.vm
excess.cpu.problem.panel=panels/problems/excess_cpu_problem_panel.vm
excess.work.problem.panel=panels/problems/excess_work_problem_panel.vm
fail.processing.problem.panel=panels/problems/fail_processing_problem_panel.vm
fail.remote.call.problem.panel=panels/problems/fail_remote_call_problem_panel.vm
fail.database.statement.problem.panel=panels/problems/fail_database_statement_problem_panel.vm
fail.database.connection.problem.panel=panels/problems/fail_database_connection_problem_panel.vm



column.agent_instance=Application Server
column.server_nickname=Server Name
column.op_short=Operation Name
column.operation=Operation Full Name
column.executions=Executions
column.status=Status
column.analysis=Analysis
column.percentcpu=% CPU
column.percentusercpu=% User CPU
column.analysis=Analysis
column.readstatus=\u25CF
column.avgtime=Avg time (sec)
column.application=Application Name
action.filter.text.all=View All
action.filter.text.sloworfailing=Only View Slow/Failing
action.filter.text.onlyfailing=Only View Failing
action.filter.tooltip.all=View all operations
action.filter.tooltip.sloworfailing=Only view slow or failing operations; hide OK operations
action.filter.tooltip.onlyfailing=Only view failing operations
action.reset.statistics=Reset Server Statistics
action.dump.to.file=Log details to file
action.refresh.text=Refresh Table
action.refresh.tooltip=Refresh the list of problems from the Glassbox Server
action.enable.monitoring=Enable Monitoring
action.disable.monitoring=Disable Monitoring
action.about.glassbox=About Glassbox
action.reset.statistics.dialog.title=Reset All Server Statistics
action.dump.details.to.file.dialog.title=Log Details To File
action.dump.to.file=GlassboxDetail-
action.dump.to.file.tooltip=Log details to a Glassbox Details HTML file in the client directory
action.reset.statistics.dialog.question=This resets ALL SERVERS and effects ALL USERS. \n\n This will discard all of the troubleshooting data Glassbox has gathered on each of the servers you are currently connected to, and it will effect all users. \n You can reset the statistics for a single server within the Connection Properties in the Option Menu \n\n Are you sure you wish to continue?
action.reset.statistics.tooltip=Reset All Statistics on the Glassbox Server
action.connect_agent.text=Connect
action.connect_agent.tooltip=Connect to Glassbox Server
action.disconnect_agent.text=Disconnect
action.disconnect_agent.tooltip=Disconnect from all Glassbox Servers
action.show.server.configuration=Configuration Check
action.show.website.startup=Updates Check
action.enable.monitoring.tooltip=Enable Glassbox monitoring within the application
action.disable.monitoring.tooltip=Suspend Glassbox monitoring within the application

action.help.forums=Online Forums
action.help.forums.url=http://www.glassbox.com/forum
action.help.docsonline=Online Documentation
action.help.docsonline.url=http://www.glassbox.com/glassbox/Docs.do
action.help.support=Support or Questions
action.help.support.url=http://www.glassbox.com/glassbox/Contact.do
action.help.downloads=Get Troubleshooter License
action.help.downloads.url=https://www.glassbox.com/glassbox/Payment.do?operation=1&Submit=Get+Troubleshooter

#Operation status
operation.status.fail=Failed {0} time(s) ({1}%) 
operation.status.slow=Slow {0} time(s) ({1}%)
operation.status.ok= All successful executions within {0} second goal


#Current problems.
slow.remote.overall=Excessive Remote Calls
slow.remote.call=Slow Remote Call
slow.database=Slow Database
slow.dispatch=Slow Dispatch/Helper
slow.database.overall=Excessive Database Activity
fail.dispatch=Failing Dispatch/Helper Code
fail.database.connection=DB Connection Failure
fail.database.statement=DB Statement Failure
fail.remote.call=Remote Call Failure
ok.performance=Acceptable Performance
single.threaded.queue=Thread Contention
excess.work=Excess Work
excess.cpu=CPU Hog
slow.method=Slow Java Method
fail.processing=Java Processing Failure

#Current problem icons
slow.remote.overall.icon=slow-remote-call-v2-32.jpg
slow.remote.call.icon=slow-remote-call-v2-32.jpg
slow.database.icon= slow-database-32x32.jpg
slow.dispatch.icon=slow-java32.jpg
slow.database.overall.icon=slow-database-32x32.jpg
fail.database.connection.icon=database-conn-failure-32x32.jpg
fail.database.statement.icon= failing-database-32x32.jpg
fail.remote.call.icon= failing-remote-call-v2-32.jpg
ok.performance.icon= ok-checkmark-32x32.jpg
single.threaded.queue.icon=thread-contention-32x32.jpg
excess.work.icon=yellow-hourglass32.jpg
excess.cpu.icon=excess-cpu-32x32.jpg
slow.method.icon=slow-java32.jpg
fail.processing.icon=failing-java-cup-32x32.jpg
fail.dispatch.icon=failing-java-cup-32x32.jpg

synchronize.icon=synchronize32.jpg

low.initial.memory.setting= The initial server VM Memory: {0} is insufficient. The suggested setting is {1}.
window.title=Detailed Operation Analysis
glassbox.title=Glassbox
wizard.description=Detailed analysis of this operation.
column.analysis=Analysis
action.filter.slow=Show Slow 
result.ok=This operation is running within the defined service level.


#Current options analyzed.
options.slow.database=Slow Database
options.fail.database.connection=DB Connection Failure
options.fail.database.statement=DB Statement Failure
options.fail.remote.call=Remote Call Failure
options.ok.performance=Acceptable Performance
options.single.threaded.queue=Thread Contention
options.excess.work=Excess Activity
options.excess.cpu=CPU Hog
options.fail.processing=Processing Failure
options.slow.dispatch=Slow Dispatch/Helper Code
options.fail.dispatch=Failing Dispatch/Helper Code

problem.type.info.fail.database.connection=The operation's thread failed to get a database connection at the following points:
problem.describe.fail.database.connection=Database Connection URL: {0} failed for {1} distinct connection requests.

problem.type.info.fail.database.statement=The operation's thread issued a failing database statement at the following points:
problem.describe.fail.database.statement=SQL statement: {0} failed for {1} distinct statement requests.

problem.type.info.slow.database=The following calls were slow:
problem.describe.slow.database=Your operation is waiting a long time for a database connection. This is often caused by a database connection pool that is too small, or the complete lack of use of a connection pool within your application.

problem.type.info.slow.database.overall=The following calls were made:
problem.describe.slow.database.overall=Your operation is spending an excessive amount of time in database calls though no particular database call is excessively slow.

problem.type.info.excess.work=
problem.describe.excess.work=The operation {0} ran just over the defined threshhold, and Glassbox was unable to pinpoint a cause.  To get further information, please try varying the load on the server, which may allow us to gain more information OR you can set the performance threshhold slightly lower (maybe a 20% decrease) as per the Glassbox User Guide.

problem.type.info.fail.remote.call=The operation's thread made failing remote services calls at the following points:
problem.describe.fail.remote.call=Remote Connection URL: {0} failed {1} distinct time(s).

problem.type.info.slow.remote.call=The following calls were each slow:
problem.describe.slow.remote.call=This operation called a distributed remote service, which slowed it beyond your performance threshold.

problem.type.info.slow.remote.overall=The following calls combined to be slow:
problem.describe.slow.remote.overall=This operation made multiple remote service calls, which combined to slow your application below the performance threshold.

problem.type.info.fail.processing=There was a Java processing failure in this operation.
problem.describe.fail.processing=

problem.type.info.slow.method.1=When the operation ran slowly its thread was detected running for a long time in a single Java method.
problem.type.info.slow.method.2=When the Operation ran slowly, we gathered some additional information about a single Java method that ran for a long time.  This Slow Java Method is normally not a separate problem,  but it provides a supporting Java based view of problems presented already.
problem.describe.slow.method=It took an average across all requests of {0} executing code beneath the following stack trace:

problem.type.info.slow.dispatch.1=Your {0} operation was slow in the dispatch or helper layers. The dispatch and helper layer normally consists of 'overhead' activities that aren't directly specific to the action being taken, so slowness is less likely to go unnoticed but is more debilitating since these functions span multiple operations. Examples are logic to hand off to the correct function, authentication, cleanup or a formatting helper function.
problem.describe.slow.dispatch=Please see the following stack trace:

problem.type.info.fail.dispatch.1=Your {0} operation failed in the dispatch or helper layers.  The dispatch and helper layer normally consists of 'overhead' activities that aren't directly specific to the action being taken, so errors are often less likely but more debilitating since these functions span multiple operations. Examples are logic to hand off to the correct function, authentication, cleanup or a formatting helper function.
problem.describe.fail.dispatch=Please see the following stack trace:

problem.type.info.slow.single.threaded.queue=Threads processing the operation were detected waiting on the following locked resources:
problem.describe.slow.single.threaded.queue=Threads processing the operation took an average time in each request of {0} waiting in the following stack trace.

problem.type.info.excess.cpu=
problem.describe.excess.cpu=Over {0} executions, this operation has recorded {1} of CPU time during {2} total execution time. This CPU usage caused the operation to exceed the performance threshold {3} of the time.


result.slow.unknown=This operation is slow due to excessive work, not caused by contention or a slow database.
result.fail.unknown=This operation is failing, not caused by either remote calls or a database issue.
result.unknown=No additional information about this issue can be determined.
result.slow.database=The slow operation was caused by poor response from a call to the database.
result.slow.dispatch=The slow operation was caused by poor performance in your dispatch or helper layers, not in the primary specific codeline for the operation.
result.slow.database.primary=The primary cause for your slow operation was poor response from a call to the database. 
result.slow.database.secondary=Your operation was additionally slowed by poor response from a call to the database.
result.single.threaded.queue=The slowness was caused by a group of Java thread processes all waiting on the same synchronized resource.
result.single.threaded.queue.primary=The primary cause for your slow operation was a group of Java thread processes all waiting on the same synchronized resource.  
result.single.threaded.queue.secondary=Your operation was additionally slowed by a group of Java thread processes all waiting on the same synchronized resource.
result.fail.database.connection=The failure was caused by a java process that could not connect to the database successfully.
result.fail.dispatch=The failure occurred in your dispatch or helper layers, or helper layers, not in the primary specific codeline for the operation.
result.fail.database.connection.primary=The primary cause of failure was a java process that could not connect to the database successfully.
result.fail.database.connection.secondary=Your operation also failed due to a java process that could not connect to the database successfully.
result.fail.database.statement=The failure was caused by a database statement that failed when executed by a java process.
result.fail.database.statement.primary=The primary cause of failure was a database statement that failed when executed by a java process.
result.fail.database.statement.secondary=Your operation also failed due to a database statement that failed when executed by a java process.
result.fail.remote.call=The failure was caused by a remote call that failed when processing this operation.
result.fail.remote.call.primary=The primary cause of failure was a remote call that failed when processing this operation.
result.fail.remote.call.secondary=Your operation also failed due to a remote call that failed in processing.
result.excess.work=Your operation was slow because of an inefficient java process, it was written poorly and java was simply overworked.
result.excess.work.primary=The primary cause of your slow operation was an inefficient java process, it was written poorly and java was simply overworked.
result.excess.work.secondary=Your operation was also slow due to an inefficient java process, it was written poorly and java was simply overworked.
result.excess.cpu=Your operation was slow because of its excessively high CPU usage.
result.excess.cpu.primary=The primary cause of your slow operation was its excessively high CPU usage.
result.excess.cpu.secondary=Your operation was also slow due to its excessively high CPU usage.
result.fail.processing=Your operation failed due to errors that made Java processing fail.
result.fail.processing.primary=The primary cause of failure was a failure in processing in Java code.
result.fail.processing.secondary=Your operation also failed due to a failure in processing in Java code.
result.slow.summary=Frequency of Issue: It {0} {1} out of {2} calls ({3}) 
result.monitor.summary=since {0}, with an average running time of {2}
#result.date.format=MM/dd/yyyy
result.date.format=MM/dd


ruled.out.problems.header=Glassbox has ruled out other potential problems:

ruled.out.problem.fail.database.connection=Database connections were successfully established.
ruled.out.problem.fail.database.statement=Calls to the database did not throw any SQL Exceptions.
ruled.out.problem.slow.database=All database calls individually executed with acceptable speed.
ruled.out.problem.slow.database.overall=Overall time spent in database operations was not excessive.
ruled.out.problem.slow.remote.call=All remote calls individually executed with acceptable speed.
ruled.out.problem.slow.remote.overall=Overall time spent in remote calls was not excessive.
ruled.out.problem.fail.remote.call=No failures detected in a remote call or Web Service.
ruled.out.problem.single.threaded.queue=Java threads were not observed waiting on locks for inordinate periods of time.
ruled.out.problem.excess.cpu=The operation did not overly tax the CPU.
ruled.out.problem.excess.work=There was no excessive work detected.
ruled.out.problem.slow.method=There was no slow Java code.
ruled.out.problem.fail.processing=Java processing did not throw exceptions or show error pages.
ruled.out.problem.slow.dispatch=The dispatch and helper layers ran within the allocated time.
ruled.out.problem.fail.dispatch=There were no errors detected in the dispatch and helper layers.

verdict.problem.fail.database.connection=Could not connect to the database
verdict.problem.fail.database.statement=Database statement failed 
verdict.problem.slow.database=Slow database response
verdict.problem.slow.database.overall=Too many database calls
verdict.problem.slow.remote.call=Slow response from remote service call
verdict.problem.slow.remote.overall=Too many remote service calls
verdict.problem.fail.remote.call=Failure in remote service calls
verdict.problem.single.threaded.queue=Java bottleneck due to too many operations waiting on the same resource
verdict.problem.excess.cpu=Taxing CPU with too much Java code
verdict.problem.excess.work=Marginally over threshold, unable to pinpoint cause
verdict.problem.slow.method=Spending too much time in a particular section of Java code
verdict.problem.slow.dispatch=Spending too much time in dispatch or helper layers
verdict.problem.fail.dispatch=Failures in dispatch or helper layers
verdict.problem.fail.processing=Errors encountered in Java code when processing the operation

header.problem.fail.database.connection=Database Connection Failure
header.problem.fail.database.statement=Database Statement Failure
header.problem.slow.database=Slow Database Call
header.problem.slow.database.overall=Excessive Database Activity
header.problem.slow.remote.call=Slow Remote Service Call
header.problem.slow.remote.overall=Excessive Remote Service Activity
header.problem.fail.remote.call=Remote Call Failure
header.problem.single.threaded.queue=Java Resource Contention
header.problem.excess.cpu=Excessive CPU Usage
header.problem.excess.work=Excessive Work
header.problem.slow.method=Slow Java code
header.problem.fail.processing=Failure in Java processing
header.problem.slow.dispatch=Slow Dispatching or Helper Layer
header.problem.fail.dispatch=Failure in Dispatch or Helper Layer

summary.info_1.fail.database.connection=The {0} operation encountered errors when connecting to the {1}.
summary.info_1.fail.database.statement=The {0} operation had a failing database statement {2} against the {1}.
summary.info_1.slow.database=When the {0} operation ran slowly, it took an average of {1}, including significant time in {3} {2}.
summary.info_1.slow.database.overall=When the operation {0} ran slowly, it executed {1} different statements against the {2}.
summary.info_1.slow.remote.call=When the {0} operation ran slowly, it took an average of {1}, including significant time in remote call {2} waiting for a response from an external service.
summary.info_1.slow.remote.overall=When the operation {0} ran slowly, it took an average of {1}, including time making an average of {2} requests of external service(s).
summary.info_1.fail.remote.call=The {0} operation had failing remote calls to the {1}.
summary.info_1.single.threaded.queue=When the {0} operation ran slowly, it took an average of {1}, including time in method {2} waiting for threads to release a lock on a Java object.
summary.info_1.excess.cpu=The operation {0} used an average of {1} of application server CPU time per request.
summary.info_1.excess.work=The operation {0} ran just over the defined threshhold, and Glassbox was unable to pinpoint a cause.  See the details section for further information and causes ruled out.
summary.info_1.slow.method=When the operation {0} ran slowly, it took an average of {1}, including {3} in the Java method {2}.  Please see the stack trace below for additional details.
summary.info_1.fail.processing=The {0} operation had failures: it threw unexpected exceptions, showed an error page, and/or returned an error code.
summary.info_1.slow.dispatch=Your {0} operation was slow in performing dispatch or helper activities. These normally consist of 'overhead' activities that aren't directly specific to the action being taken such as authentication, cleanup or a formatting helper function.
summary.info_1.ok.performance=This operation met performance goals.
summary.info_1.fail.dispatch=Your {0} operation failed in performing dispatch or helper activities. These normally consist of 'overhead' activities that aren't directly specific to the action being taken such as authentication, cleanup or a formatting helper function.


summary.info_n.fail.database.connection=The {0} operation encountered errors when connecting to the {1}.
summary.info_n.fail.database.statement=The {0} operation had {2} distinct types of database statement error while interacting with the {1}.
summary.info_n.slow.database=When the {0} operation ran slowly, it took an average of {1}, including time spent waiting for {3} distinct slow responses from the {2}.
summary.info_n.slow.database.overall=When the operation {0} ran slowly, it executed an average of {1} different statements against the {2}.
summary.info_n.slow.remote.call=When the {0} operation ran slowly, it took an average of {1}, including {2} distinct occurences of waiting excessively for a response from an external service.
summary.info_n.slow.remote.overall=When the operation {0} ran slowly, it took an average of {1}, including time making an average of {2} requests of external service(s).
summary.info_n.fail.remote.call=The {0} operation had {2} distinct failing remote calls to the {1}.
summary.info_n.single.threaded.queue=When the {0} operation ran slowly, it had {1} distinct occurences where it took an average of {2}, including time spent waiting for threads to release locks on Java object(s).
summary.info_n.excess.cpu=When the operation {0} ran slowly, it had {1} distinct occurences where it used excessive application server CPU time.
summary.info_n.excess.work=The operation {0} ran just over the defined threshhold, and Glassbox was unable to pinpoint a cause.  To get further information, please try varying the load on the server, which may allow us to gain more information OR you can set the performance threshhold slightlly lower (maybe a 20% decrease) as per the Glassbox User Guide.
summary.info_n.slow.method=Multiple slow methods. When the operation {0} ran slowly, it took an average of {1}, including time in the Java method {2}.  Please see the stack trace for details.
summary.info_n.fail.processing=The {0} operation had failures: it threw unexpected exceptions, showed an error page, and/or returned an error code.
summary.info_n.fail.dispatch=Your {0} operation was repeatedly slow while performing dispatch or helper activities. These normally consists of 'overhead' activities that aren't directly specific to the action being taken such as authentication, cleanup or a formatting helper function.
summary.info_n.slow.dispatch=Your {0} operation had multiple failures while performing dispatch or helper activities. These normally consists of 'overhead' activities that aren't directly specific to the action being taken such as authentication, cleanup or a formatting helper function.

summary.extra.fail.database.connection=A database connection failure indicates the application server cannot open a new connection to the database, it is not necessarily a problem within the database itself.
summary.extra.fail.database.statement=A database statement failure indicates that the application server sent a request to the database, but the request failed and returned an error.
summary.extra.slow.database=A slow database call indicates that the application server sent a successful request to the database, but the response came back slowly.
summary.extra.slow.database.overall=Excessive database activity indicates that although no particular database request is slow, there are enough database calls that overall it makes the application lag.
summary.extra.slow.remote.call=A slow remote service call indicates that the application server successfully called some remote functionality, but the response came back slowly.
summary.extra.slow.remote.overall=Excessive remote service activity indicates that although no particular remote function is slow, there are enough remote calls that overall it makes the application lag.
summary.extra.fail.remote.call=A remote call failure indicates that the application server sent a request to a remote service, but the request failed and returned an error (e.g., a SOAP fault).
summary.extra.single.threaded.queue=Java resource contention indicates that several Java processes in the application are all waiting on the same resource at the same time.  This causes both process threads to hold up the application while they waited.
summary.extra.excess.cpu=Excess CPU usage indicates that a particular operation uses an inordinate amount of CPU time, it will likely hog the CPU and impede scaling.
summary.extra.excess.work=Excess overall activity indicates that a particular Java operation uses an inordinate amount of system resources, but we did not find any specific cause for the issue.  Too many such functions will impede scaling, so consider a code review of this operation.
summary.extra.slow.method=Slow Java code indicates that a particular part of the Java code called in processing operation uses an inordinate amount of system resources. We have identified the most specific part of the code that is responsible for the worst performance.  Too many such functions will impede scaling, so consider a code review of this operation.
summary.extra.fail.processing=An processing failure indicates that the operation had failures: it threw unexpected exceptions, showed an error pages, and/or returned an error code.
summary.extra.slow.dispatch=The dispatch and helper layer normally consists of 'overhead' activities that aren't directly specific to the action being taken, and it is often expected to be tuned for speed sing it is generally run frequently. Examples are logic to hand off to the correct function, authentication, cleanup or a formatting helper function.
summary.extra.fail.dispatch=The dispatch and helper layer normally consists of 'overhead' activities that aren't directly specific to the action being taken, so errors are often less likely but more debilitating since these functions span multiple operations. Examples are logic to hand off to the correct function, authentication, cleanup or a formatting helper function.



comsol.fail.database.connection.title=For Database Connection Failures
comsol.fail.database.connection.num=6
comsol.fail.database.connection.entry_1=Correct your operation's connection URL, the Application Server is trying to connect to the wrong IP, Port or Database Name.
comsol.fail.database.connection.entry_2=Increase the size of the DB Connection pool on your application server.
comsol.fail.database.connection.entry_3=Bounce your DB associated with your operation, it is not up or frozen
comsol.fail.database.connection.entry_4=Make your application server close the DB connections when a query completes (note: careful doing this if you have a connection pool).
comsol.fail.database.connection.entry_5=Configure your DB to allow more connections.
comsol.fail.database.connection.entry_6=Fix the network, the App Server cannot ping the database server machine.

comsol.fail.database.statement.title=For Database Statement Failures
comsol.fail.database.statement.num=7
comsol.fail.database.statement.entry_1=Handle the NULL case, your operation's query fails when no rows are returned.
comsol.fail.database.statement.entry_2=Handle the error case, your query doesn't catch errors correctly.
comsol.fail.database.statement.entry_3=Correct the database server location, database name or table name in your operation.
comsol.fail.database.statement.entry_4=Your operation's key data was deleted from your table, recreate it.
comsol.fail.database.statement.entry_5=Your operation's key schema was deleted from your table, recreate it.
comsol.fail.database.statement.entry_6=Bounce the DB, it is not up or frozen.
comsol.fail.database.statement.entry_7=Configure your DB, it is out of resources.

comsol.fail.processing.title=For Operation Failures
comsol.fail.processing.num=6
comsol.fail.processing.entry_1=Check the logic in the method that is executing when the failure occurs.
comsol.fail.processing.entry_2=Check for recent changes to the code that is failing.
comsol.fail.processing.entry_3=Check for handling NULL values.
comsol.fail.processing.entry_4=Check for handling other invalid inputs.
comsol.fail.processing.entry_5=Look for code that isn't thread safe (race conditions).
comsol.fail.processing.entry_6=Check for resource exhaustion (e.g., out of memory from leaks, pool failures).

comsol.slow.database.title=For a Slow Database Call
comsol.slow.database.num=7
comsol.slow.database.entry_1=Use stored procedures or prepared statements inside your operation.
comsol.slow.database.entry_2=Your operation has some full tablescans, fix them.
comsol.slow.database.entry_3=Examine the joins your operation calls, tune the multi-dimensional joins.
comsol.slow.database.entry_4=Someone else is running a large script on the database, find out who and why.
comsol.slow.database.entry_5=The database server is poorly configured for the current load, give it more resources (disk, ram, connections, etc)
comsol.slow.database.entry_6=Fix the read/write locking issues on your table.
comsol.slow.database.entry_7=Remove the other processes from the database server, the database is starved for resources.

comsol.slow.database.overall.title=For Excessive Database Activity
comsol.slow.database.overall.num=9
comsol.slow.database.overall.entry_1=Use stored procedures or prepared statements inside your operation.
comsol.slow.database.overall.entry_2=Bundle your operation's database calls together into a large stored procedure.
comsol.slow.database.overall.entry_3=Your operation has some full tablescans, fix them.
comsol.slow.database.overall.entry_4=Examine the joins your operation calls, tune the multi-dimensional joins.
comsol.slow.database.overall.entry_5=Someone else is running a large script on the database, find out who and why.
comsol.slow.database.overall.entry_6=Remove the other processes from the database server, the database is starved for resources.
comsol.slow.database.overall.entry_7=The database server is poorly configured for the current load, give it more resources (disk, ram, connections, etc)
comsol.slow.database.overall.entry_8=Solve your network latency problems.
comsol.slow.database.overall.entry_9=Move to bulk updates.

comsol.slow.remote.call.title=For a Slow Remote Service Call
comsol.slow.remote.call.num=3
comsol.slow.remote.call.entry_1=Fix your slow network or find out what is flooding it.
comsol.slow.remote.call.entry_2=Properly multi-thread the Web Service you are calling, when multiple requests come in at once, there is contention.
comsol.slow.remote.call.entry_3=Move the functionality from your Web Service into your enterprise server, Web Services add overhead.

comsol.slow.remote.overall.title=For Excessive Remote Service Activity
comsol.slow.remote.overall.num=4
comsol.slow.remote.overall.entry_1=Bundle your operation's service calls together into a more coarse-grained service invocation.
comsol.slow.remote.overall.entry_2=Fix your slow network or find out what is flooding it.
comsol.slow.remote.overall.entry_3=Allow sufficient concurrency (thread pools and efficient data structures) for the service you are calling: when multiple requests come in at once, there may be contention.
comsol.slow.remote.overall.entry_4=Move functionality from remote services onto local servers to reduce latency.

comsol.fail.remote.call.title=For Remote Service Failures
comsol.fail.remote.call.num=4
comsol.fail.remote.call.entry_1=Ensure you are connecting to the right URL for the service.
comsol.fail.remote.call.entry_2=Ensure the service is running. 
comsol.fail.remote.call.entry_3=Ensure the service can be reached through the network.
comsol.fail.remote.call.entry_4=Make sure the service is still accepting the data format which the system is sending it.

comsol.single.threaded.queue.title=For Java Resource Contention
comsol.single.threaded.queue.num=4
comsol.single.threaded.queue.entry_1=The lock is identified above, look at whoever else may be competing with you for it.
comsol.single.threaded.queue.entry_2=Your operation is synchronizing or locking too large an area of code, creating needless contention.
comsol.single.threaded.queue.entry_3=Write out a timing diagram around your operation.
comsol.single.threaded.queue.entry_4=Add logging which shows when someone acquires the lock, and what they are doing at that moment.

comsol.slow.method.title=For a Slow Java Method
comsol.slow.method.num=4
comsol.slow.method.entry_1=Look at the code that is slow to see what it's doing.
comsol.slow.method.entry_2=Identify operations being called from this code that might be slow like disk I/O, network I/O, or remote calls.
comsol.slow.method.entry_3=Look at the CPU usage data to determine whether the method is slow from too much processing or too much I/O.
comsol.slow.method.entry_4=Replace your operation's inneficient data structures such linked lists with something more efficient like a hashmap.

comsol.slow.dispatch.title=For a Slow Dispatch or Helper Layer
comsol.slow.dispatch.num=3
comsol.slow.dispatch.entry_1=A dispatch or helper layer generally consists of overhead activities shared by many functions like initialization or a formatting helper. Is it slow only for this function?  Look for things that might run primarily for this operation.
comsol.slow.dispatch.entry_2=Look at configuration, and what configuration may have changed, these layers are run by many operations and you are less likely to find normal slowness there than in your operation specific code.
comsol.slow.dispatch.entry_3=Look at the stack trace, examine the Java code for that slow portion.

comsol.fail.dispatch.title=For a Failing Dispatch or Helper Layer 
comsol.fail.dispatch.num=3
comsol.fail.dispatch.entry_1=A dispatch or helper layer generally consists of overhead activities shared by many functions like initialization code or a formatting helper. Is it failing only for this function?  Look for things that might run primarily for this operation.
comsol.fail.dispatch.entry_2=Look at configuration, and what configuration may have changed, these layers are run by many operations and you are less likely to find normal failures there than in your operation specific code.
comsol.fail.dispatch.entry_3=Look at the stack trace, examine the Java code for that failing portion.


comsol.excess.cpu.title=For Excessive CPU Usage
comsol.excess.cpu.num=3
comsol.excess.cpu.entry_1=Use 'top' or a similar task manager to find out the CPU usage on the machine, the root cause might be another program.
comsol.excess.cpu.entry_2=Replace your operation's inneficient data structures such linked lists with something more efficient like a hashmap.
comsol.excess.cpu.entry_3=Remove any looping or busy waiting in the operation

comsol.excess.work.title=For Excessive Activity
comsol.excess.work.num=2
comsol.excess.work.entry_1=Review the code within the scope of the slow operation.
comsol.excess.work.entry_2=Turn down the performance threshold by 20% in Glassbox as per the user guide.  This will likely give additional data about the operation and provide a stack trace with more details.

execution.time.format=0.0#
nanos.format.ms={0,number,#. ms}
nanos.format.sec={0,number,0.0# s}